     1                                  ; CHECK ALL PACKET INPUTS
     2                                  ; CHECK ALL PACKET OUTPUTS
     3                                  ; implement custom stack for parent process so that parent does not hog child process stack
     4                                  ; check why exit not sent (2) debugger does not exit after program exits (3) as long as connection exists gdb won't exit
     5                                  ; remove debug print statements
     6                                  ; improve documentation
     7                                  ; add webview? for disassembly
     8                                  ; show correct values for registers (16 bit) and values of labels
     9                                  ; move variables down
    10                                  
    11                                  [org 0x0100]
    12                                  
    13 00000000 E9B90F                      jmp start
    14                                  
    15                                  %define ARRAY_SIZE 512
    16                                  %define MCR 0x03FC
    17                                  %define IER 0x03F9
    18                                  
    19 00000003 0000                    orig_sp:        dw 0
    20 00000005 00000000                oldtrapisr:     dd 0
    21 00000009 00000000                oldbrkisr:      dd 0
    22 0000000D 00000000                oldcomisr:      dd 0
    23 00000011 00000000                oldretisr:      dd 0
    24 00000015 00<rep 80h>             filepath:       times 128 db 0
    25 00000095 0000                    childseg:       dw 0
    26                                  
    27 00000097 464C203D4353203D49-     names:          db 'FL =CS =IP =BP =AX =BX =CX =DX =SI =DI =DS =ES ='
    27 000000A0 50203D4250203D4158-
    27 000000A9 203D4258203D435820-
    27 000000B2 3D4458203D5349203D-
    27 000000BB 4449203D4453203D45-
    27 000000C4 53203D             
    28                                  
    29 000000C7 0000<rep Eh>            regs:           times 14 dw 0
    30 000000E3 00                      chksum:         db 0
    31 000000E4 00<rep 200h>            packet:         times ARRAY_SIZE db 0
    32 000002E4 [E400]                  packettail:     dw packet
    33 000002E6 00                      inprocessing:   db 0
    34 000002E7 00                      startprogram:   db 0
    35 000002E8 00                      forcepause:     db 0
    36                                  
    37 000002E9 713F6B736370675A7A-     availpacks:     db 'q', '?', 'k', 's', 'c', 'p', 'g', 'Z', 'z', 'm', 'X'
    37 000002F2 6D58               
    38 000002F4 [0A0D][3A0D][420D]-     addresspacks:   dw gdb_unknown, gdb_why, gdb_kill, gdb_debugger, gdb_debugger, gdb_extract_register, gdb_send_registers, gdb_set_breakpoint, gdb_remove_breakpoint, gdb_read_memory, gdb_write_memory
    38 000002FA [4C0D][4C0D][580D]-
    38 00000300 [8E0D][B90D][F10D]-
    38 00000306 [290E][900E]       
    39 0000030A 0B00                    packslength:    dw ($ - addresspacks) / 2
    40                                  
    41 0000030C 71537570706F727465-     supportPack:    db 'qSupported', 0
    41 00000315 6400               
    42 00000317 76436F6E743F00          contPack:       db 'vCont?', 0
    43 0000031E 764D7573745265706C-     mustreplyPack:  db 'vMustReplyEmpty', 0
    43 00000327 79456D70747900     
    44 0000032E 48673000                multiPack:      db 'Hg0', 0
    45 00000332 716654687265616449-     threadPack:     db 'qfThreadInfo', 0
    45 0000033B 6E666F00           
    46 0000033F 717354687265616449-     endthreadPack:  db 'qsThreadInfo', 0
    46 00000348 6E666F00           
    47 0000034C 714174746163686564-     attachedPack:   db 'qAttached', 0
    47 00000355 00                 
    48 00000356 48632D3100              currthreadPack: db 'Hc-1', 0
    49 0000035B 714300                  querycurrPack:  db 'qC', 0
    50                                  
    51 0000035E 245061636B65745369-     supportreply:   db '$PacketSize=512;swbreak+;kill+;vContSupported-#67', 0
    51 00000367 7A653D3531323B7377-
    51 00000370 627265616B2B3B6B69-
    51 00000379 6C6C2B3B76436F6E74-
    51 00000382 537570706F72746564-
    51 0000038B 2D23363700         
    52 00000390 2423303000              nothing:        db '$#00', 0
    53 00000395 244F4B23396100          okreply:        db '$OK#9a', 0
    54 0000039C 2445303123787800        errorreply:     db '$E01#xx', 0
    55 000003A4 2453303523623800        stopreply:      db '$S05#b8', 0
    56 000003AC 246D3123396500          singletreply:   db '$m1#9e', 0
    57 000003B3 246C23366300            endlistreply:   db '$l#6c', 0
    58 000003B9 243023333000            childkillreply: db '$0#30', 0
    59 000003BF 2451433123633500        currthreply:    db '$QC1#c5', 0
    60 000003C7 2457303023353700        exitreply:      db '$W00#57', 0
    61                                  
    62 000003CF 00                      reinstallbrk:   db 0
    63 000003D0 0000                    tempbrkaddr:    dw 0
    64 000003D2 0000                    opcodearrsize:  dw 0
    65 000003D4 00<rep 200h>            opcodes:        times ARRAY_SIZE db 0
    66 000005D4 0000<rep 200h>          opcodespos:     times ARRAY_SIZE dw 0
    67                                  
    68                                  
    69                                  find_opcode:
    70                                      ; Parameters:
    71                                      ; [bp + 4] - address of breakpoint
    72                                      ; Returns:
    73                                      ; [bp + 4] - index in opcodes array
    74 000009D4 55                          push bp
    75 000009D5 89E5                        mov bp, sp
    76                                      
    77 000009D7 50                          push ax
    78 000009D8 51                          push cx
    79 000009D9 57                          push di
    80 000009DA 06                          push es
    81                                  
    82 000009DB 1E                          push ds
    83 000009DC 07                          pop es
    84                                  
    85 000009DD 8B4604                      mov ax, [bp + 4]
    86 000009E0 8B0E[D203]                  mov cx, [opcodearrsize]
    87 000009E4 BF[D405]                    mov di, opcodespos
    88                                  
    89 000009E7 E305                        jcxz missing_opcode
    90                                  
    91 000009E9 FC                          cld
    92 000009EA F2AF                        repne scasw
    93 000009EC 7407                        jz found_opcode_addr
    94                                  
    95                                  missing_opcode:
    96 000009EE C74604FFFF                  mov word [bp + 4], 0xFFFF
    97                                  
    98 000009F3 EB09                        jmp done_find
    99                                  
   100                                  found_opcode_addr:
   101 000009F5 81EF[D605]                  sub di, opcodespos + 2
   102 000009F9 D1EF                        shr di, 1
   103 000009FB 897E04                      mov [bp + 4], di
   104                                  
   105                                  done_find:
   106 000009FE 07                          pop es
   107 000009FF 5F                          pop di
   108 00000A00 59                          pop cx
   109 00000A01 58                          pop ax
   110                                  
   111 00000A02 5D                          pop bp
   112 00000A03 C3                          ret
   113                                  
   114                                  push_opcode:
   115                                      ; [bp + 4] - address of breakpoint
   116 00000A04 55                          push bp
   117 00000A05 89E5                        mov bp, sp
   118                                  
   119 00000A07 50                          push ax
   120 00000A08 51                          push cx
   121 00000A09 56                          push si
   122 00000A0A 57                          push di
   123 00000A0B 06                          push es
   124                                  
   125 00000A0C 1E                          push ds
   126 00000A0D 07                          pop es
   127                                  
   128 00000A0E 8B4604                      mov ax, [bp + 4]
   129 00000A11 8B0E[D203]                  mov cx, [opcodearrsize]
   130 00000A15 BF[D405]                    mov di, opcodespos
   131                                  
   132 00000A18 E30B                        jcxz skip_push_search
   133                                  
   134 00000A1A 81F90001                    cmp cx, 256
   135 00000A1E 7327                        jae push_opcode_error
   136                                  
   137 00000A20 FC                          cld
   138 00000A21 F2AF                        repne scasw
   139 00000A23 7422                        jz push_opcode_error
   140                                  
   141                                  skip_push_search:
   142 00000A25 89C6                        mov si, ax
   143 00000A27 8B3E[D203]                  mov di, [opcodearrsize]
   144 00000A2B 8E06[9500]                  mov es, [childseg]
   145                                  
   146                                      ; opcode replaced for breakpoint in child process
   147 00000A2F 268A04                      mov al, [es:si]
   148 00000A32 26C604CC                    mov byte [es:si], 0CCh
   149                                      ; opcode stored in array for reference
   150 00000A36 8885[D403]                  mov [opcodes + di], al
   151 00000A3A D1E7                        shl di, 1
   152 00000A3C 89B5[D405]                  mov [opcodespos + di], si
   153 00000A40 FF06[D203]                  inc word [opcodearrsize]
   154                                  
   155 00000A44 F8                          clc
   156 00000A45 EB01                        jmp done_push
   157                                  
   158                                  push_opcode_error:
   159 00000A47 F9                          stc
   160                                  
   161                                  done_push:
   162 00000A48 07                          pop es
   163 00000A49 5F                          pop di
   164 00000A4A 5E                          pop si
   165 00000A4B 59                          pop cx
   166 00000A4C 58                          pop ax
   167                                  
   168 00000A4D 5D                          pop bp
   169 00000A4E C20200                      ret 2
   170                                  
   171                                  remove_opcode:
   172                                      ; [bp + 4] - address of breakpoint
   173 00000A51 55                          push bp
   174 00000A52 89E5                        mov bp, sp
   175                                  
   176 00000A54 50                          push ax
   177 00000A55 51                          push cx
   178 00000A56 56                          push si
   179 00000A57 57                          push di
   180 00000A58 06                          push es
   181                                  
   182 00000A59 1E                          push ds
   183 00000A5A 07                          pop es
   184                                  
   185 00000A5B FF7604                      push word [bp + 4]
   186 00000A5E E873FF                      call find_opcode
   187 00000A61 59                          pop cx
   188                                  
   189 00000A62 83F9FF                      cmp cx, 0xFFFF
   190 00000A65 7439                        je remove_opcode_error
   191                                  
   192 00000A67 89CE                        mov si, cx
   193 00000A69 81C6[D403]                  add si, opcodes
   194 00000A6D 8E06[9500]                  mov es, [childseg]
   195                                  
   196                                      ; push di
   197 00000A71 8B7E04                      mov di, [bp + 4]
   198 00000A74 FC                          cld
   199                                  
   200                                      ; opcode replaced for original
   201 00000A75 AC                          lodsb
   202 00000A76 AA                          stosb
   203                                  
   204                                      ; remove opcode and shift the array
   205 00000A77 1E                          push ds
   206 00000A78 07                          pop es
   207                                  
   208                                      ; setup di index for shifting addresses
   209 00000A79 89CF                        mov di, cx
   210 00000A7B D1E7                        shl di, 1
   211 00000A7D 81C7[D405]                  add di, opcodespos
   212 00000A81 57                          push di
   213                                  
   214                                      ; shift the opcodes array
   215 00000A82 A1[D203]                    mov ax, [opcodearrsize]
   216 00000A85 29C8                        sub ax, cx
   217 00000A87 48                          dec ax
   218 00000A88 89C1                        mov cx, ax
   219 00000A8A 51                          push cx
   220                                  
   221 00000A8B 89F7                        mov di, si
   222 00000A8D 4F                          dec di
   223 00000A8E F3A4                        rep movsb
   224                                  
   225                                      ; shift the address array
   226 00000A90 59                          pop cx
   227 00000A91 5F                          pop di
   228                                  
   229 00000A92 89FE                        mov si, di
   230 00000A94 83C602                      add si, 2
   231 00000A97 F3A5                        rep movsw
   232                                  
   233 00000A99 FF0E[D203]                  dec word [opcodearrsize]
   234 00000A9D F8                          clc
   235 00000A9E EB01                        jmp done_remove
   236                                  
   237                                  remove_opcode_error:
   238 00000AA0 F9                          stc
   239                                  
   240                                  done_remove:
   241 00000AA1 07                          pop es
   242 00000AA2 5F                          pop di
   243 00000AA3 5E                          pop si
   244 00000AA4 59                          pop cx
   245 00000AA5 58                          pop ax
   246                                  
   247 00000AA6 5D                          pop bp
   248 00000AA7 C20200                      ret 2
   249                                  
   250                                  
   251                                  trapisr:
   252 00000AAA 55                          push bp
   253 00000AAB 89E5                        mov bp, sp
   254                                  
   255 00000AAD 60                          pusha
   256 00000AAE 1E                          push ds
   257 00000AAF 06                          push es
   258                                  
   259 00000AB0 0E                          push cs
   260 00000AB1 1F                          pop ds
   261                                  
   262                                      ; check if breakpoint was set in previous instruction
   263 00000AB2 803E[CF03]01                cmp byte [reinstallbrk], 1
   264 00000AB7 7518                        jne send_stop_response
   265                                  
   266 00000AB9 B0CC                        mov al, 0xCC
   267 00000ABB 8B3E[D003]                  mov di, [tempbrkaddr]
   268 00000ABF 8E06[9500]                  mov es, [childseg]
   269 00000AC3 C606[CF03]00                mov byte [reinstallbrk], 0
   270                                  
   271 00000AC8 FC                          cld
   272 00000AC9 AA                          stosb
   273                                  
   274                                      ; if this is a force step for reinstalling breakpoint, skip waiting for packet
   275 00000ACA 803E[E802]01                cmp byte [forcepause], 1
   276 00000ACF 7428                        jz packet_continue
   277                                  
   278                                  send_stop_response:
   279 00000AD1 68[A403]                    push word stopreply
   280 00000AD4 E83901                      call send_reply
   281                                  
   282 00000AD7 E88D00                      call save_registers
   283                                      
   284                                      ; wait for comisr to receive a packet
   285 00000ADA FB                          sti
   286                                  
   287                                  wait_packet:
   288 00000ADB 803E[E602]00                cmp byte [inprocessing], 0
   289 00000AE0 74F9                        je wait_packet
   290                                  
   291 00000AE2 803E[E500]73                cmp byte [packet + 1], 's'
   292 00000AE7 7409                        je packet_step
   293                                  
   294 00000AE9 803E[E500]63                cmp byte [packet + 1], 'c'
   295 00000AEE 7409                        je packet_continue
   296                                  
   297 00000AF0 EBE9                        jmp wait_packet
   298                                  
   299                                  packet_step:
   300 00000AF2 814E060001                  or word [bp + 6], 0x0100
   301                                  
   302 00000AF7 EB05                        jmp wait_packet_done
   303                                  
   304                                  packet_continue:
   305 00000AF9 816606FFFE                  and word [bp + 6], 0xFEFF
   306                                  
   307                                  wait_packet_done:
   308 00000AFE C606[E602]00                mov byte [inprocessing], 0
   309 00000B03 C606[E802]00                mov byte [forcepause], 0
   310                                  
   311 00000B08 07                          pop es
   312 00000B09 1F                          pop ds
   313 00000B0A 61                          popa
   314                                  
   315 00000B0B 5D                          pop bp
   316 00000B0C CF                          iret
   317                                  
   318                                  brkisr:
   319 00000B0D 55                          push bp
   320 00000B0E 89E5                        mov bp, sp
   321                                  
   322 00000B10 60                          pusha
   323 00000B11 1E                          push ds
   324 00000B12 06                          push es
   325                                  
   326 00000B13 0E                          push cs
   327 00000B14 1F                          pop ds
   328                                  
   329                                      ; adjust ip to re-execute the instruction after the breakpoint
   330 00000B15 FF4E02                      dec word [bp + 2]
   331                                  
   332                                      ; restore the opcode so that the program can continue
   333                                      ; ----- ideally check if es contains the same segment as childseg and fix ip if not
   334 00000B18 8E4604                      mov es, [bp + 4]
   335 00000B1B 8B7E02                      mov di, [bp + 2]
   336                                      
   337                                      ; set flags to indicate re-installation of breakpoint
   338 00000B1E C606[CF03]01                mov byte [reinstallbrk], 1
   339 00000B23 893E[D003]                  mov word [tempbrkaddr], di
   340                                  
   341                                      ; find the opcode in the opcodes array
   342 00000B27 57                          push di
   343 00000B28 E8A9FE                      call find_opcode
   344 00000B2B 5E                          pop si
   345                                  
   346 00000B2C 81C6[D403]                  add si, opcodes
   347                                  
   348                                      ; restore the original opcode
   349 00000B30 AC                          lodsb
   350 00000B31 AA                          stosb
   351                                  
   352                                      ; send stop reply
   353 00000B32 68[A403]                    push word stopreply
   354 00000B35 E8D800                      call send_reply
   355                                      ; save register values
   356 00000B38 E82C00                      call save_registers
   357                                      
   358                                      ; wait for comisr to receive a packet
   359 00000B3B FB                          sti
   360                                  
   361                                  trap_wait:
   362 00000B3C 803E[E602]00                cmp byte [inprocessing], 0
   363 00000B41 74F9                        je trap_wait
   364                                  
   365 00000B43 803E[E500]73                cmp byte [packet + 1], 's'
   366 00000B48 740E                        je normal_step
   367                                  
   368 00000B4A 803E[E500]63                cmp byte [packet + 1], 'c'
   369 00000B4F 7402                        je force_step
   370                                  
   371 00000B51 EBE9                        jmp trap_wait
   372                                  
   373                                      ; step in both cases. for continue set flag so that trapisr does not wait for another packet
   374                                  force_step:
   375 00000B53 C606[E802]01                mov byte [forcepause], 1
   376                                  
   377                                  normal_step:
   378                                      ; clear the inprocessing flag and do not wait in wait_packet
   379 00000B58 C606[E602]00                mov byte [inprocessing], 0
   380                                      ; initialize trap flag for breakpoint restoration
   381 00000B5D 814E060001                  or word [bp + 6], 0x0100
   382                                  
   383 00000B62 07                          pop es
   384 00000B63 1F                          pop ds
   385 00000B64 61                          popa
   386                                  
   387 00000B65 5D                          pop bp
   388 00000B66 CF                          iret
   389                                  
   390                                  save_registers:
   391 00000B67 50                          push ax
   392                                  
   393 00000B68 8B46FE                      mov ax, [bp - 2]
   394 00000B6B A3[C700]                    mov [regs + 0], ax  ; AX
   395 00000B6E 8B46F8                      mov ax, [bp - 8]
   396 00000B71 A3[C900]                    mov [regs + 2], ax  ; BX
   397 00000B74 8B46FC                      mov ax, [bp - 4]
   398 00000B77 A3[CB00]                    mov [regs + 4], ax  ; CX
   399 00000B7A 8B46FA                      mov ax, [bp - 6]
   400 00000B7D A3[CD00]                    mov [regs + 6], ax  ; DX
   401 00000B80 8B46F2                      mov ax, [bp - 14]
   402 00000B83 A3[CF00]                    mov [regs + 8], ax  ; SI
   403 00000B86 8B46F0                      mov ax, [bp - 16]
   404 00000B89 A3[D100]                    mov [regs + 10], ax ; DI
   405 00000B8C 8B4600                      mov ax, [bp]
   406 00000B8F A3[D300]                    mov [regs + 12], ax ; BP
   407 00000B92 8B46F6                      mov ax, [bp - 10]
   408 00000B95 83E808                      sub ax, 8
   409 00000B98 A3[D500]                    mov [regs + 14], ax ; SP
   410 00000B9B 8B4602                      mov ax, [bp + 2]
   411 00000B9E A3[D700]                    mov [regs + 16], ax ; IP
   412 00000BA1 8B4606                      mov ax, [bp + 6]
   413 00000BA4 A3[D900]                    mov [regs + 18], ax ; FLAGS
   414 00000BA7 8B4604                      mov ax, [bp + 4]
   415 00000BAA A3[DB00]                    mov [regs + 20], ax ; CS
   416 00000BAD 8B46EE                      mov ax, [bp - 18]
   417 00000BB0 A3[DD00]                    mov [regs + 22], ax ; DS
   418 00000BB3 8B46EC                      mov ax, [bp - 20]
   419 00000BB6 A3[DF00]                    mov [regs + 24], ax ; ES
   420 00000BB9 8C16[E100]                  mov [regs + 26], ss ; SS
   421                                  
   422 00000BBD 58                          pop ax
   423 00000BBE C3                          ret
   424                                  
   425                                  
   426                                  send_byte:
   427 00000BBF 55                          push bp
   428 00000BC0 89E5                        mov bp, sp
   429 00000BC2 50                          push ax
   430 00000BC3 52                          push dx
   431                                  
   432                                  testline:
   433 00000BC4 B403                        mov ah, 3
   434 00000BC6 31D2                        xor dx, dx
   435 00000BC8 CD14                        int 0x14
   436                                  
   437 00000BCA 80E420                      and ah, 32
   438 00000BCD 74F5                        jz testline
   439                                  
   440 00000BCF 8A4604                      mov al, [bp + 4]
   441 00000BD2 BAF803                      mov dx, 0x3F8
   442 00000BD5 EE                          out dx, al
   443                                  
   444 00000BD6 5A                          pop dx
   445 00000BD7 58                          pop ax
   446 00000BD8 5D                          pop bp
   447 00000BD9 C20200                      ret 2
   448                                  
   449                                  send_hex:
   450                                      ; Parameters:
   451                                      ; [bp + 4] - value to send
   452                                      ; Returns:
   453                                      ; [bp + 4] - checksum value
   454                                  
   455 00000BDC 55                          push bp
   456 00000BDD 89E5                        mov bp, sp
   457 00000BDF 50                          push ax
   458 00000BE0 52                          push dx
   459                                  
   460 00000BE1 31C0                        xor ax, ax
   461 00000BE3 31D2                        xor dx, dx
   462                                  
   463 00000BE5 B0F0                        mov al, 0F0h
   464 00000BE7 224604                      and al, [bp + 4]
   465 00000BEA C0E804                      shr al, 4
   466                                  
   467 00000BED 50                          push ax
   468 00000BEE E82205                      call convert_to_ascii
   469 00000BF1 58                          pop ax
   470 00000BF2 00C2                        add dl, al
   471 00000BF4 50                          push ax
   472 00000BF5 E8C7FF                      call send_byte
   473                                  
   474 00000BF8 B80F00                      mov ax, 0xF
   475 00000BFB 224604                      and al, [bp + 4]
   476 00000BFE 50                          push ax
   477 00000BFF E81105                      call convert_to_ascii
   478 00000C02 58                          pop ax
   479 00000C03 00C2                        add dl, al
   480 00000C05 50                          push ax
   481 00000C06 E8B6FF                      call send_byte
   482                                  
   483 00000C09 885604                      mov [bp + 4], dl
   484                                  
   485 00000C0C 5A                          pop dx
   486 00000C0D 58                          pop ax
   487 00000C0E 5D                          pop bp
   488 00000C0F C3                          ret
   489                                  
   490                                  send_reply:
   491 00000C10 55                          push bp
   492 00000C11 89E5                        mov bp, sp
   493 00000C13 50                          push ax
   494 00000C14 56                          push si
   495                                      
   496 00000C15 31C0                        xor ax, ax
   497 00000C17 8B7604                      mov si, [bp + 4]
   498                                  
   499                                  replyloop:
   500 00000C1A 8A04                        mov al, [si]
   501 00000C1C 50                          push ax
   502 00000C1D E89FFF                      call send_byte
   503                                  
   504 00000C20 46                          inc si
   505 00000C21 803C00                      cmp byte [si], 0
   506 00000C24 75F4                        jnz replyloop
   507                                  
   508 00000C26 5E                          pop si
   509 00000C27 58                          pop ax
   510 00000C28 5D                          pop bp
   511 00000C29 C20200                      ret 2
   512                                  
   513                                  comisr:
   514 00000C2C 55                          push bp
   515 00000C2D 89E5                        mov bp, sp
   516                                  
   517 00000C2F 60                          pusha
   518 00000C30 1E                          push ds
   519 00000C31 06                          push es
   520                                  
   521 00000C32 0E                          push cs
   522 00000C33 0E                          push cs
   523 00000C34 1F                          pop ds
   524 00000C35 07                          pop es
   525                                  
   526 00000C36 BAFA03                      mov dx, 0x3FA
   527 00000C39 EC                          in al, dx
   528 00000C3A 240F                        and al, 0x0F
   529                                  
   530 00000C3C 3C04                        cmp al, 4
   531 00000C3E 754E                        jne nodata
   532                                  
   533 00000C40 BAF803                      mov dx, 0x3F8
   534 00000C43 EC                          in al, dx
   535                                  
   536 00000C44 3C24                        cmp al, '$'
   537 00000C46 750D                        jne insidepacket
   538                                  
   539 00000C48 C706[E402][E400]            mov word [packettail], packet
   540 00000C4E C606[E300]00                mov byte [chksum], 0
   541                                  
   542 00000C53 EB0F                        jmp storepacket
   543                                  
   544                                  insidepacket:
   545 00000C55 3C23                        cmp al, '#'
   546 00000C57 7407                        je chksumstarted
   547                                  
   548 00000C59 803E[E300]00                cmp byte [chksum], 0
   549 00000C5E 7404                        je storepacket
   550                                  
   551                                  chksumstarted:
   552 00000C60 FE06[E300]                  inc byte [chksum]
   553                                  
   554                                  storepacket:
   555 00000C64 8B1E[E402]                  mov bx, [packettail]
   556 00000C68 8807                        mov [bx], al
   557                                  
   558 00000C6A FF06[E402]                  inc word [packettail]
   559                                  
   560                                      ; check if packet is complete
   561 00000C6E 803E[E300]03                cmp byte [chksum], 3
   562 00000C73 7519                        jne nodata
   563                                  
   564                                      ; send acknowledgment
   565 00000C75 6A2B                        push word '+'
   566 00000C77 E845FF                      call send_byte
   567                                  
   568                                      ; setting packet processing flag
   569 00000C7A C606[E602]01                mov byte [inprocessing], 1
   570                                  
   571 00000C7F 6A14                        push word 20
   572 00000C81 6A00                        push word 0
   573 00000C83 68[E400]                    push word packet
   574 00000C86 6A14                        push word 20
   575 00000C88 E82705                      call printstr
   576                                  
   577                                      ; process the received packet
   578 00000C8B E80900                      call packet_processor
   579                                  
   580                                  nodata: 
   581 00000C8E B020                        mov al, 0x20
   582 00000C90 E620                        out 0x20, al
   583                                  
   584 00000C92 07                          pop es
   585 00000C93 1F                          pop ds
   586 00000C94 61                          popa
   587                                      
   588 00000C95 5D                          pop bp
   589 00000C96 CF                          iret
   590                                  
   591                                  packet_processor:
   592 00000C97 A0[E500]                    mov al, [packet + 1]
   593 00000C9A BF[E902]                    mov di, availpacks
   594 00000C9D 8B0E[0A03]                  mov cx, [packslength]
   595                                  
   596                                      ; check general packets
   597 00000CA1 68[0C03]                    push word supportPack
   598 00000CA4 E8A304                      call check_packet
   599 00000CA7 7459                        jz gdb_support
   600                                  
   601 00000CA9 68[1703]                    push word contPack
   602 00000CAC E89B04                      call check_packet
   603 00000CAF 7459                        jz gdb_unknown
   604                                  
   605 00000CB1 68[1E03]                    push word mustreplyPack
   606 00000CB4 E89304                      call check_packet
   607 00000CB7 7451                        jz gdb_unknown
   608                                  
   609 00000CB9 68[2E03]                    push word multiPack
   610 00000CBC E88B04                      call check_packet
   611 00000CBF 7451                        jz gdb_ok
   612                                  
   613 00000CC1 68[3203]                    push word threadPack
   614 00000CC4 E88304                      call check_packet
   615 00000CC7 7451                        jz gdb_single_thread
   616                                  
   617 00000CC9 68[3F03]                    push word endthreadPack
   618 00000CCC E87B04                      call check_packet
   619 00000CCF 7451                        jz gdb_end_list
   620                                  
   621 00000CD1 68[4C03]                    push word attachedPack
   622 00000CD4 E87304                      call check_packet
   623 00000CD7 7451                        jz gdb_child_process
   624                                  
   625 00000CD9 68[5603]                    push word currthreadPack
   626 00000CDC E86B04                      call check_packet
   627 00000CDF 7431                        jz gdb_ok
   628                                  
   629 00000CE1 68[5B03]                    push word querycurrPack
   630 00000CE4 E86304                      call check_packet
   631 00000CE7 7449                        jz gdb_curr_thread
   632                                  
   633                                      ; find respective packet type
   634 00000CE9 FC                          cld
   635 00000CEA F2AE                        repne scasb
   636 00000CEC 7402                        jz found_packet
   637                                  
   638 00000CEE EB1A                        jmp gdb_unknown
   639                                  
   640                                  found_packet:
   641 00000CF0 81EF[EA02]                  sub di, availpacks + 1
   642 00000CF4 D1E7                        shl di, 1
   643 00000CF6 81C7[F402]                  add di, addresspacks
   644                                  
   645 00000CFA FF25                        jmp [di]
   646                                  
   647                                  terminate_packet_processing:
   648                                      ; toggle packet processing flag
   649 00000CFC 8036[E602]01                xor byte [inprocessing], 1
   650                                  
   651 00000D01 C3                          ret
   652                                  
   653                                  gdb_support:
   654 00000D02 68[5E03]                    push word supportreply
   655 00000D05 E808FF                      call send_reply
   656                                  
   657 00000D08 EBF2                        jmp terminate_packet_processing
   658                                  
   659                                  gdb_unknown:
   660 00000D0A 68[9003]                    push word nothing
   661 00000D0D E800FF                      call send_reply
   662                                  
   663 00000D10 EBEA                        jmp terminate_packet_processing
   664                                  
   665                                  gdb_ok:
   666 00000D12 68[9503]                    push word okreply
   667 00000D15 E8F8FE                      call send_reply
   668                                  
   669 00000D18 EBE2                        jmp terminate_packet_processing
   670                                  
   671                                  gdb_single_thread:
   672 00000D1A 68[AC03]                    push word singletreply
   673 00000D1D E8F0FE                      call send_reply
   674                                  
   675 00000D20 EBDA                        jmp terminate_packet_processing
   676                                  
   677                                  gdb_end_list:
   678 00000D22 68[B303]                    push word endlistreply
   679 00000D25 E8E8FE                      call send_reply
   680                                  
   681 00000D28 EBD2                        jmp terminate_packet_processing
   682                                  
   683                                  gdb_child_process:
   684 00000D2A 68[B903]                    push word childkillreply
   685 00000D2D E8E0FE                      call send_reply
   686                                  
   687 00000D30 EBCA                        jmp terminate_packet_processing
   688                                  
   689                                  gdb_curr_thread:
   690 00000D32 68[BF03]                    push word currthreply
   691 00000D35 E8D8FE                      call send_reply
   692                                  
   693 00000D38 EBC2                        jmp terminate_packet_processing
   694                                  
   695                                  gdb_why:
   696 00000D3A 68[A403]                    push word stopreply
   697 00000D3D E8D0FE                      call send_reply
   698                                  
   699 00000D40 EBBA                        jmp terminate_packet_processing
   700                                  
   701                                  gdb_kill:
   702                                      ; no need to send reply
   703 00000D42 C606[E702]00                mov byte [startprogram], 0
   704                                  
   705                                      ; terminate the program in child's context
   706 00000D47 B8004C                      mov ax, 0x4c00
   707 00000D4A CD21                        int 0x21
   708                                  
   709                                  gdb_debugger:
   710                                      ; toggle flag to start the child program's execution
   711 00000D4C C606[E702]01                mov byte [startprogram], 1
   712                                      ; toggle flag beforehand so that it remains on and is handle by debugger isrs
   713 00000D51 8036[E602]01                xor byte [inprocessing], 1
   714                                  
   715 00000D56 EBA4                        jmp terminate_packet_processing
   716                                  
   717                                  gdb_extract_register:
   718 00000D58 68[E600]                    push word packet + 2
   719 00000D5B 6A01                        push word 1
   720 00000D5D E87003                      call extract_hex
   721 00000D60 5F                          pop di
   722 00000D61 58                          pop ax
   723                                  
   724 00000D62 D1E7                        shl di, 1
   725 00000D64 31C0                        xor ax, ax
   726 00000D66 31DB                        xor bx, bx
   727                                  
   728 00000D68 6A24                        push word '$'
   729 00000D6A E852FE                      call send_byte
   730                                  
   731 00000D6D 8A85[C700]                  mov al, [regs + di]
   732 00000D71 50                          push ax
   733 00000D72 E867FE                      call send_hex
   734 00000D75 5B                          pop bx
   735                                  
   736 00000D76 8A85[C800]                  mov al, [regs + di + 1]
   737 00000D7A 50                          push ax
   738 00000D7B E85EFE                      call send_hex
   739 00000D7E 58                          pop ax
   740                                  
   741 00000D7F 00D8                        add al, bl 
   742                                  
   743 00000D81 6A23                        push word '#'
   744 00000D83 E839FE                      call send_byte
   745 00000D86 50                          push ax
   746 00000D87 E852FE                      call send_hex
   747 00000D8A 58                          pop ax
   748                                  
   749 00000D8B E96EFF                      jmp terminate_packet_processing
   750                                  
   751                                  gdb_send_registers:
   752 00000D8E 6A24                        push word '$'
   753 00000D90 E82CFE                      call send_byte
   754                                  
   755 00000D93 31C0                        xor ax, ax
   756 00000D95 31DB                        xor bx, bx
   757 00000D97 31C9                        xor cx, cx
   758 00000D99 31D2                        xor dx, dx
   759                                  
   760                                  nextreg:
   761 00000D9B 8A87[C700]                  mov al, [regs + bx]
   762 00000D9F 50                          push ax
   763 00000DA0 E839FE                      call send_hex
   764 00000DA3 58                          pop ax
   765                                      
   766 00000DA4 00C2                        add dl, al
   767 00000DA6 43                          inc bx
   768                                  
   769 00000DA7 83FB1C                      cmp bx, 14 * 2
   770 00000DAA 75EF                        jne nextreg
   771                                  
   772                                      ; checksum
   773 00000DAC 6A23                        push word '#'
   774 00000DAE E80EFE                      call send_byte
   775 00000DB1 52                          push dx
   776 00000DB2 E827FE                      call send_hex
   777 00000DB5 5A                          pop dx
   778                                  
   779 00000DB6 E943FF                      jmp terminate_packet_processing
   780                                  
   781                                  ; fix this function call to accept seg:off pair
   782                                  gdb_set_breakpoint:
   783 00000DB9 B02C                        mov al, ','
   784 00000DBB BF[E800]                    mov di, packet + 4
   785 00000DBE B90A00                      mov cx, 10
   786                                  
   787 00000DC1 FC                          cld 
   788 00000DC2 F2AE                        repne scasb
   789                                  
   790 00000DC4 81EF[E900]                  sub di, packet + 5
   791                                  
   792 00000DC8 68[E800]                    push word packet + 4
   793 00000DCB 57                          push di
   794 00000DCC E80103                      call extract_hex
   795 00000DCF E85403                      call convert_physical_to_logical
   796 00000DD2 5F                          pop di
   797 00000DD3 58                          pop ax
   798                                  
   799 00000DD4 C1E004                      shl ax, 4
   800 00000DD7 01F8                        add ax, di
   801                                  
   802 00000DD9 50                          push ax
   803 00000DDA E827FC                      call push_opcode
   804 00000DDD 7209                        jc set_breakpoint_error
   805                                  
   806 00000DDF 68[9503]                    push word okreply
   807 00000DE2 E82BFE                      call send_reply
   808                                  
   809 00000DE5 E914FF                      jmp terminate_packet_processing
   810                                  
   811                                  set_breakpoint_error:
   812 00000DE8 68[9C03]                    push word errorreply
   813 00000DEB E822FE                      call send_reply
   814                                  
   815 00000DEE E90BFF                      jmp terminate_packet_processing
   816                                  
   817                                  ; this as well
   818                                  gdb_remove_breakpoint:
   819 00000DF1 B02C                        mov al, ','
   820 00000DF3 BF[E800]                    mov di, packet + 4
   821 00000DF6 B90A00                      mov cx, 10
   822                                  
   823 00000DF9 FC                          cld 
   824 00000DFA F2AE                        repne scasb
   825                                  
   826 00000DFC 81EF[E900]                  sub di, packet + 5
   827                                  
   828 00000E00 68[E800]                    push word packet + 4
   829 00000E03 57                          push di
   830 00000E04 E8C902                      call extract_hex
   831 00000E07 E81C03                      call convert_physical_to_logical
   832 00000E0A 5F                          pop di
   833 00000E0B 58                          pop ax
   834                                  
   835 00000E0C C1E004                      shl ax, 4
   836 00000E0F 01F8                        add ax, di
   837                                  
   838 00000E11 50                          push ax
   839 00000E12 E83CFC                      call remove_opcode
   840 00000E15 7209                        jc remove_breakpoint_error
   841                                  
   842 00000E17 68[9503]                    push word okreply
   843 00000E1A E8F3FD                      call send_reply
   844                                  
   845 00000E1D E9DCFE                      jmp terminate_packet_processing
   846                                  
   847                                  remove_breakpoint_error:
   848 00000E20 68[9C03]                    push word errorreply
   849 00000E23 E8EAFD                      call send_reply
   850                                  
   851 00000E26 E9D3FE                      jmp terminate_packet_processing
   852                                  
   853                                  gdb_read_memory:
   854                                      ; extract length of address in packet
   855 00000E29 B02C                        mov al, ','
   856 00000E2B BF[E600]                    mov di, packet + 2
   857 00000E2E B90A00                      mov cx, 10
   858                                  
   859 00000E31 FC                          cld
   860 00000E32 F2AE                        repne scasb
   861                                  
   862                                      ; length in bx
   863 00000E34 89FB                        mov bx, di
   864 00000E36 81EB[E700]                  sub bx, packet + 3
   865                                  
   866                                      ; extract length of number of bytes to read
   867 00000E3A B023                        mov al, '#'
   868 00000E3C B90A00                      mov cx, 10
   869                                  
   870 00000E3F F2AE                        repne scasb
   871                                  
   872                                      ; length in cx
   873 00000E41 81EF[E800]                  sub di, packet + 4
   874 00000E45 29DF                        sub di, bx
   875 00000E47 89F9                        mov cx, di
   876                                  
   877                                      ; extract and convert 32 bit address to segment:offset
   878 00000E49 68[E600]                    push word packet + 2
   879 00000E4C 53                          push bx
   880 00000E4D E88002                      call extract_hex
   881 00000E50 E8D302                      call convert_physical_to_logical
   882 00000E53 5F                          pop di
   883 00000E54 07                          pop es
   884                                  
   885                                      ; extract number of bytes to read
   886 00000E55 B8[E700]                    mov ax, packet + 3
   887 00000E58 01D8                        add ax, bx
   888                                      
   889 00000E5A 50                          push ax
   890 00000E5B 51                          push cx
   891 00000E5C E87102                      call extract_hex
   892 00000E5F 59                          pop cx
   893 00000E60 58                          pop ax
   894                                  
   895 00000E61 31C0                        xor ax, ax
   896 00000E63 31D2                        xor dx, dx
   897                                      ; mov es, [childseg]        ; dunnno what to do with this
   898                                  
   899 00000E65 6A24                        push word '$'
   900 00000E67 E855FD                      call send_byte
   901                                  
   902                                  read_memory_loop:
   903 00000E6A 268A05                      mov al, [es:di]
   904 00000E6D 50                          push ax
   905 00000E6E E86BFD                      call send_hex
   906 00000E71 58                          pop ax
   907                                  
   908 00000E72 00C2                        add dl, al
   909 00000E74 47                          inc di
   910                                  
   911                                      ; handling segment wrap for large memory reads
   912 00000E75 83FF00                      cmp di, 0
   913 00000E78 7507                        jne no_wrap_in_memory
   914                                  
   915 00000E7A 8CC0                        mov ax, es
   916 00000E7C 050010                      add ax, 0x1000
   917 00000E7F 8EC0                        mov es, ax
   918                                  
   919                                  no_wrap_in_memory:
   920 00000E81 E2E7                        loop read_memory_loop
   921                                  
   922 00000E83 6A23                        push word '#'
   923 00000E85 E837FD                      call send_byte
   924 00000E88 52                          push dx
   925 00000E89 E850FD                      call send_hex
   926 00000E8C 5A                          pop dx
   927                                  
   928 00000E8D E96CFE                      jmp terminate_packet_processing
   929                                  
   930                                  ; check this
   931                                  gdb_write_memory:
   932                                      ; extract length of address in packet
   933 00000E90 B02C                        mov al, ','
   934 00000E92 BF[E600]                    mov di, packet + 2
   935 00000E95 B90A00                      mov cx, 10
   936                                  
   937 00000E98 FC                          cld
   938 00000E99 F2AE                        repne scasb
   939                                  
   940                                      ; length in bx
   941 00000E9B 89FB                        mov bx, di
   942 00000E9D 81EB[E700]                  sub bx, packet + 3
   943                                  
   944                                      ; extract length of number of bytes to write
   945 00000EA1 B03A                        mov al, ':'
   946 00000EA3 B90A00                      mov cx, 10
   947                                  
   948 00000EA6 F2AE                        repne scasb
   949                                  
   950                                      ; length in cx and pointer to data in si
   951 00000EA8 89FE                        mov si, di
   952 00000EAA 81EF[E800]                  sub di, packet + 4
   953 00000EAE 29DF                        sub di, bx
   954 00000EB0 89F9                        mov cx, di
   955                                  
   956                                      ; extract and convert 32 bit address to segment:offset
   957 00000EB2 68[E600]                    push word packet + 2
   958 00000EB5 53                          push bx
   959 00000EB6 E81702                      call extract_hex
   960 00000EB9 E86A02                      call convert_physical_to_logical
   961 00000EBC 5F                          pop di
   962 00000EBD 07                          pop es
   963                                  
   964                                      ; extract number of bytes to write
   965 00000EBE B8[E700]                    mov ax, packet + 3
   966 00000EC1 01D8                        add ax, bx
   967                                  
   968 00000EC3 50                          push ax
   969 00000EC4 51                          push cx
   970 00000EC5 E80802                      call extract_hex
   971 00000EC8 59                          pop cx
   972 00000EC9 58                          pop ax
   973                                  
   974 00000ECA 31C0                        xor ax, ax
   975 00000ECC 31D2                        xor dx, dx
   976 00000ECE 89F3                        mov bx, si
   977                                      ; mov es, [childseg]
   978                                  
   979                                  write_memory_loop:
   980 00000ED0 53                          push bx
   981 00000ED1 6A02                        push word 2
   982 00000ED3 E8FA01                      call extract_hex
   983 00000ED6 58                          pop ax
   984 00000ED7 5E                          pop si
   985                                  
   986 00000ED8 AA                          stosb
   987 00000ED9 43                          inc bx
   988                                  
   989 00000EDA E2F4                        loop write_memory_loop
   990                                  
   991 00000EDC E933FE                      jmp gdb_ok
   992                                  
   993                                  
   994                                  hookISR: 
   995 00000EDF 50                          push ax
   996 00000EE0 06                          push es
   997                                  
   998 00000EE1 31C0                        xor ax, ax
   999 00000EE3 8EC0                        mov es, ax
  1000                                  
  1001                                      ; saving original ISRs
  1002                                  
  1003                                      ; single step trap
  1004                                      ; (int 1h)
  1005 00000EE5 26A10400                    mov ax, [es:0x1 * 4]
  1006 00000EE9 A3[0500]                    mov [oldtrapisr], ax
  1007 00000EEC 26A10600                    mov ax, [es:0x1 * 4 + 2]
  1008 00000EF0 A3[0700]                    mov [oldtrapisr + 2], ax
  1009                                      ; breakpoint trap
  1010                                      ; (int 3h)
  1011 00000EF3 26A10C00                    mov ax, [es:0x3 * 4]
  1012 00000EF7 A3[0900]                    mov [oldbrkisr], ax
  1013 00000EFA 26A10E00                    mov ax, [es:0x3 * 4 + 2]
  1014 00000EFE A3[0B00]                    mov [oldbrkisr + 2], ax
  1015                                      ; COM port interrupt
  1016                                      ; (int 0Ch)
  1017 00000F01 26A13000                    mov ax, [es:0xC * 4]
  1018 00000F05 A3[0D00]                    mov [oldcomisr], ax
  1019 00000F08 26A13200                    mov ax, [es:0xC * 4 + 2]
  1020 00000F0C A3[0F00]                    mov [oldcomisr + 2], ax
  1021                                      ; return to parent process interrupt
  1022                                      ; (int 22h)
  1023 00000F0F 26A18800                    mov ax, [es:0x22 * 4]
  1024 00000F13 A3[1100]                    mov [oldretisr], ax
  1025 00000F16 26A18A00                    mov ax, [es:0x22 * 4 + 2]
  1026 00000F1A A3[1300]                    mov [oldretisr + 2], ax
  1027                                  
  1028                                      ; hooking ISRs
  1029                                  
  1030 00000F1D FA                          cli
  1031                                  
  1032                                      ; single step trap
  1033 00000F1E 26C7060400[AA0A]            mov word [es:0x1 * 4], trapisr
  1034 00000F25 268C0E0600                  mov [es:0x1 * 4 + 2], cs
  1035                                      ; breakpoint trap
  1036 00000F2A 26C7060C00[0D0B]            mov word [es:0x3 * 4], brkisr
  1037 00000F31 268C0E0E00                  mov [es:0x3 * 4 + 2], cs
  1038                                      ; COM port interrupt
  1039 00000F36 26C7063000[2C0C]            mov word [es:0xC * 4], comisr
  1040 00000F3D 268C0E3200                  mov [es:0xC * 4 + 2], cs
  1041                                      ; return to parent process interrupt
  1042 00000F42 26C7068800[4F10]            mov word [es:0x22 * 4], return_to_parent
  1043 00000F49 268C0E8A00                  mov [es:0x22 * 4 + 2], cs
  1044                                  
  1045                                      ; enabling interrupts
  1046                                  
  1047                                      ; enable OUT2
  1048 00000F4E BAFC03                      mov dx, MCR
  1049 00000F51 EC                          in al, dx
  1050 00000F52 0C08                        or al, 8 ; enable bit 3 (OUT2)
  1051 00000F54 EE                          out dx, al
  1052                                      ; enable IER
  1053 00000F55 BAF903                      mov dx, IER
  1054 00000F58 EC                          in al, dx
  1055 00000F59 0C01                        or al, 1
  1056 00000F5B EE                          out dx, al
  1057                                      ; enable PIC 
  1058 00000F5C E421                        in al, 0x21
  1059 00000F5E 24EF                        and al, 0xEF
  1060 00000F60 E621                        out 0x21, al
  1061                                  
  1062 00000F62 FB                          sti
  1063                                  
  1064 00000F63 07                          pop es
  1065 00000F64 58                          pop ax
  1066                                  
  1067 00000F65 C3                          ret
  1068                                  
  1069                                  unhookISR:
  1070 00000F66 50                          push ax
  1071 00000F67 06                          push es
  1072                                  
  1073 00000F68 31C0                        xor ax, ax
  1074 00000F6A 8EC0                        mov es, ax
  1075                                  
  1076                                      ; restoring original ISRs
  1077                                  
  1078 00000F6C FA                          cli
  1079                                  
  1080                                      ; single step trap
  1081                                      ; (int 1h)
  1082 00000F6D A1[0500]                    mov ax, [oldtrapisr]
  1083 00000F70 26A30400                    mov [es:0x1 * 4], ax
  1084 00000F74 A1[0700]                    mov ax, [oldtrapisr + 2]
  1085 00000F77 26A30600                    mov [es:0x1 * 4 + 2], ax
  1086                                      ; breakpoint trap
  1087                                      ; (int 3h)
  1088 00000F7B A1[0900]                    mov ax, [oldbrkisr]
  1089 00000F7E 26A30C00                    mov [es:0x3 * 4], ax
  1090 00000F82 A1[0B00]                    mov ax, [oldbrkisr + 2]
  1091 00000F85 26A30E00                    mov [es:0x3 * 4 + 2], ax
  1092                                      ; COM port interrupt
  1093                                      ; (int 0Ch)
  1094 00000F89 A1[0D00]                    mov ax, [oldcomisr]
  1095 00000F8C 26A33000                    mov [es:0xC * 4], ax
  1096 00000F90 A1[0F00]                    mov ax, [oldcomisr + 2]
  1097 00000F93 26A33200                    mov [es:0xC * 4 + 2], ax
  1098                                      ; return to parent process interrupt
  1099                                      ; (int 22h)
  1100 00000F97 A1[1100]                    mov ax, [oldretisr]
  1101 00000F9A 26A38800                    mov [es:0x22 * 4], ax
  1102 00000F9E A1[1300]                    mov ax, [oldretisr + 2]
  1103 00000FA1 26A38A00                    mov [es:0x22 * 4 + 2], ax
  1104                                  
  1105                                      ; disabling interrupts
  1106                                  
  1107                                      ; disable OUT2
  1108 00000FA5 BAFC03                      mov dx, MCR
  1109 00000FA8 EC                          in al, dx
  1110 00000FA9 24F7                        and al, 0xF7 ; disable bit 3 (OUT2)
  1111 00000FAB EE                          out dx, al
  1112                                      ; disable IER
  1113 00000FAC BAF903                      mov dx, IER
  1114 00000FAF 30C0                        xor al, al
  1115 00000FB1 EE                          out dx, al
  1116                                      ; disable PIC 
  1117 00000FB2 E421                        in al, 0x21
  1118 00000FB4 0C10                        or al, 0x10
  1119 00000FB6 E621                        out 0x21, al
  1120                                  
  1121 00000FB8 FB                          sti
  1122                                  
  1123 00000FB9 07                          pop es
  1124 00000FBA 58                          pop ax
  1125                                  
  1126 00000FBB C3                          ret
  1127                                  
  1128                                  start:
  1129                                      ;-----initialize COM port for debugging-----
  1130 00000FBC B400                        mov ah, 0
  1131 00000FBE B0E3                        mov al, 0xE3
  1132 00000FC0 31D2                        xor dx, dx
  1133 00000FC2 CD14                        int 0x14
  1134                                  
  1135                                      ;-----hook interrupt service routines-----
  1136 00000FC4 E818FF                      call hookISR
  1137                                  
  1138                                      ;-----read file path-----
  1139 00000FC7 31C9                        xor cx, cx
  1140 00000FC9 8A0E8000                    mov cl, [0x80]
  1141 00000FCD 80F901                      cmp cl, 1
  1142 00000FD0 0F8C9C00                    jl no_filepath
  1143                                  
  1144                                      ; remove trailing spaces
  1145 00000FD4 FEC9                        dec cl
  1146 00000FD6 BE8200                      mov si, 0x82
  1147 00000FD9 BF[1500]                    mov di, filepath
  1148 00000FDC FC                          cld
  1149 00000FDD F3A4                        rep movsb
  1150                                  
  1151                                      ;-----resizing memory for debugger-----
  1152 00000FDF BB[6412]                    mov bx, parentstack
  1153 00000FE2 81C30F04                    add bx, 1024 + 15
  1154 00000FE6 C1EB04                      shr bx, 4
  1155                                  
  1156 00000FE9 8CC8                        mov ax, cs
  1157 00000FEB 8EC0                        mov es, ax
  1158 00000FED B44A                        mov ah, 0x4A
  1159 00000FEF CD21                        int 0x21
  1160                                  
  1161                                      ;-----allocating memory for child process-----
  1162 00000FF1 B80048                      mov ax, 0x4800
  1163 00000FF4 BB0010                      mov bx, 0x1000
  1164 00000FF7 CD21                        int 0x21
  1165 00000FF9 7279                        jc no_memory_available
  1166 00000FFB A3[9500]                    mov [childseg], ax
  1167                                  
  1168                                      ;-----creating psp for child process-----
  1169 00000FFE B455                        mov ah, 0x55
  1170 00001000 8B16[9500]                  mov dx, [childseg]
  1171 00001004 BE0000                      mov si, 0
  1172 00001007 CD21                        int 0x21
  1173                                  
  1174                                      ;-----open .COM file-----
  1175 00001009 B8003D                      mov ax, 0x3D00
  1176 0000100C BA[1500]                    mov dx, filepath
  1177 0000100F CD21                        int 0x21
  1178 00001011 725F                        jc file_not_found
  1179                                  
  1180                                      ;-----load .COM file into memory-----
  1181 00001013 1E                          push ds
  1182                                  
  1183 00001014 89C3                        mov bx, ax
  1184 00001016 B43F                        mov ah, 0x3F
  1185 00001018 B9FFFF                      mov cx, 0xFFFF
  1186 0000101B BA0001                      mov dx, 0x0100
  1187 0000101E 8E1E[9500]                  mov ds, [childseg]
  1188 00001022 CD21                        int 0x21
  1189 00001024 7250                        jc file_not_read
  1190                                  
  1191 00001026 1F                          pop ds
  1192                                  
  1193                                      ;-----close .COM file-----
  1194 00001027 B43E                        mov ah, 0x3E
  1195 00001029 CD21                        int 0x21
  1196                                  
  1197                                      ;-----initialize registers-----
  1198 0000102B 8926[0300]                  mov [orig_sp], sp
  1199 0000102F BCFEFF                      mov sp, 0xFFFE
  1200                                  
  1201 00001032 A1[9500]                    mov ax, [childseg]
  1202 00001035 8ED8                        mov ds, ax
  1203 00001037 8ED0                        mov ss, ax
  1204 00001039 8EC0                        mov es, ax
  1205                                  
  1206 0000103B 9C                          pushf
  1207 0000103C 50                          push ax
  1208 0000103D 680001                      push word 0x0100
  1209                                  
  1210                                      ; wait till first continue packet arrives
  1211                                  wait_for_continue:
  1212 00001040 2E803E[E702]01              cmp byte [cs:startprogram], 1
  1213 00001046 75F8                        jne wait_for_continue
  1214                                  
  1215                                      ; reset as program is continuing (allegedly)
  1216 00001048 2EC606[E602]00              mov byte [cs:inprocessing], 0
  1217                                  
  1218 0000104E CF                          iret
  1219                                  
  1220                                      ;-----come back to original process-----
  1221                                  return_to_parent:
  1222                                      ; reset parent's registers
  1223 0000104F 8CC8                        mov ax, cs
  1224 00001051 8ED8                        mov ds, ax
  1225 00001053 8ED0                        mov ss, ax
  1226 00001055 8EC0                        mov es, ax
  1227 00001057 8B26[0300]                  mov sp, [orig_sp]
  1228                                  
  1229                                      ; send reply to gdb that child exitted
  1230 0000105B 803E[E702]00                cmp byte [startprogram], 0
  1231 00001060 7406                        jz child_skipped
  1232                                  
  1233 00001062 68[C703]                    push word exitreply
  1234 00001065 E8A8FB                      call send_reply
  1235                                  
  1236                                  child_skipped:
  1237 00001068 E8FBFE                      call unhookISR
  1238                                  
  1239 0000106B B8004C                      mov ax, 0x4C00
  1240 0000106E CD21                        int 0x21
  1241                                  
  1242                                  ;-----error handling-----
  1243                                  no_filepath:
  1244 00001070 EBFE                        jmp no_filepath
  1245                                  
  1246                                  file_not_found:
  1247 00001072 EBFE                        jmp file_not_found
  1248                                  
  1249                                  no_memory_available:
  1250 00001074 EBFE                        jmp no_memory_available
  1251                                  
  1252                                  file_not_read:
  1253 00001076 EBFE                        jmp file_not_read
  1254                                  
  1255                                  
  1256                                  ; 
  1257                                  push_parent_stack:
  1258 00001078 2E8C16[5A12]                mov [cs:tempregs], ss
  1259 0000107D 2E8926[5C12]                mov [cs:tempregs + 2], sp
  1260 00001082 2E892E[5E12]                mov [cs:tempregs + 4], bp
  1261 00001087 2EA3[6012]                  mov [cs:tempregs + 6], ax
  1262 0000108B 2E891E[6212]                mov [cs:tempregs + 8], bx
  1263                                  
  1264 00001090 5B                          pop bx
  1265                                  
  1266 00001091 89E5                        mov bp, sp
  1267 00001093 2E8B26[6416]                mov sp, [cs:parentstack + 1024]
  1268 00001098 8CC8                        mov ax, cs
  1269 0000109A 8ED0                        mov ss, ax
  1270                                  
  1271 0000109C FF7604                      push word [bp + 4]
  1272 0000109F FF7602                      push word [bp + 2]
  1273 000010A2 FF7600                      push word [bp + 0]
  1274                                  
  1275 000010A5 FFE3                        jmp bx
  1276                                  
  1277                                  pop_parent_stack:
  1278 000010A7 5B                          pop bx
  1279                                  
  1280 000010A8 89E5                        mov bp, sp
  1281 000010AA 2E8B26[5C12]                mov sp, [cs:tempregs + 2]
  1282 000010AF 2E8E16[5A12]                mov ss, [cs:tempregs]
  1283                                  
  1284 000010B4 83EC06                      sub sp, 6
  1285 000010B7 FF7604                      push word [bp + 4]
  1286 000010BA FF7602                      push word [bp + 2]
  1287 000010BD FF7600                      push word [bp + 0]
  1288 000010C0 53                          push bx
  1289                                  
  1290 000010C1 2E8B2E[5E12]                mov bp, [cs:tempregs + 4]
  1291 000010C6 2EA1[6012]                  mov ax, [cs:tempregs + 6]
  1292 000010CA 2E8B1E[6212]                mov bx, [cs:tempregs + 8]
  1293                                  
  1294 000010CF C3                          ret
  1295                                  
  1296                                  
  1297                                  ; change extract_hex everywhere and use convertor to extract address if not value
  1298                                  extract_hex:
  1299                                      ; Parameters:
  1300                                      ; [bp + 6] - address of value to extract
  1301                                      ; [bp + 4] - length (max 8 for 32 bit address)
  1302                                  
  1303                                      ; Returns:
  1304                                      ; [bp + 6] - higher word of 32 bit address
  1305                                      ; [bp + 4] - lower word of 32 bit address
  1306                                  
  1307 000010D0 55                          push bp
  1308 000010D1 89E5                        mov bp, sp
  1309                                  
  1310 000010D3 50                          push ax
  1311 000010D4 51                          push cx
  1312 000010D5 56                          push si
  1313                                  
  1314 000010D6 8B4E04                      mov cx, [bp + 4]
  1315 000010D9 8B7606                      mov si, [bp + 6]
  1316                                  
  1317 000010DC C746060000                  mov word [bp + 6], 0
  1318 000010E1 C746040000                  mov word [bp + 4], 0
  1319                                  
  1320                                  extract_next_hex:
  1321 000010E6 8A04                        mov al, [si]
  1322 000010E8 2C30                        sub al, 0x30
  1323                                  
  1324 000010EA 3C0A                        cmp al, 10
  1325 000010EC 7202                        jb skip_extract_char
  1326                                  
  1327 000010EE 2C27                        sub al, 0x27
  1328                                  
  1329                                  skip_extract_char:
  1330                                      ; shift the 32 bit value left by 4 bits
  1331 000010F0 C1660604                    shl word [bp + 6], 4        ; higher nibble is empty
  1332 000010F4 C1460404                    rol word [bp + 4], 4        ; higher nibble that is to be shifted to bp+6 is now in lower nibble
  1333                                  
  1334 000010F8 B40F                        mov ah, 0xF                 ; prepare mask
  1335 000010FA 226604                      and ah, [bp + 4]            ; extract the higher nibble
  1336 000010FD 836606F0                    and word [bp + 6], 0xFFF0   ; reset lower nibble of higher word
  1337 00001101 086606                      or [bp + 6], ah             ; pasted higher nibble to the higher word
  1338                                  
  1339 00001104 836604F0                    and word [bp + 4], 0xFFF0   ; reset lower nibble of higher word
  1340 00001108 084604                      or [bp + 4], al             ; pasted extracted lower nibble to the lower word
  1341                                  
  1342 0000110B 46                          inc si
  1343 0000110C E2D8                        loop extract_next_hex
  1344                                  
  1345 0000110E 5E                          pop si
  1346 0000110F 59                          pop cx
  1347 00001110 58                          pop ax
  1348                                  
  1349 00001111 5D                          pop bp
  1350 00001112 C3                          ret
  1351                                  
  1352                                  
  1353                                  convert_to_ascii:
  1354 00001113 55                          push bp
  1355 00001114 89E5                        mov bp, sp
  1356                                      
  1357 00001116 807E040A                    cmp byte [bp + 4], 10
  1358 0000111A 7C04                        jl hex_digit
  1359                                  
  1360 0000111C 80460427                    add byte [bp + 4], 0x27
  1361                                  
  1362                                  hex_digit:
  1363 00001120 80460430                    add byte [bp + 4], 0x30
  1364                                  
  1365 00001124 5D                          pop bp
  1366 00001125 C3                          ret
  1367                                  
  1368                                  
  1369                                  ; converts a 32 bit physical address to a logical address in segment:offset format
  1370                                  convert_physical_to_logical:
  1371                                      ; Parameters:
  1372                                      ; [bp + 6] - higher word of 32 bit physical address
  1373                                      ; [bp + 4] - lower word of 32 bit physical address
  1374                                  
  1375                                      ; Returns:
  1376                                      ; [bp + 6] - segment of logical address
  1377                                      ; [bp + 4] - offset of logical address
  1378                                  
  1379 00001126 55                          push bp
  1380 00001127 89E5                        mov bp, sp
  1381                                  
  1382 00001129 50                          push ax
  1383 0000112A 51                          push cx
  1384 0000112B 52                          push dx
  1385                                  
  1386 0000112C 8B4604                      mov ax, [bp + 4]
  1387 0000112F 8B5606                      mov dx, [bp + 6]
  1388 00001132 B90400                      mov cx, 4
  1389                                  
  1390                                      ; mask to 20 bits
  1391 00001135 83E20F                      and dx, 0x000F
  1392                                  
  1393                                  segment_shift_loop:
  1394 00001138 D1EA                        shr dx, 1
  1395 0000113A D1D8                        rcr ax, 1
  1396 0000113C E2FA                        loop segment_shift_loop
  1397                                  
  1398 0000113E 894606                      mov [bp + 6], ax ; segment
  1399 00001141 8366040F                    and word [bp + 4], 0x000F ; keep only lower 4 bits of offset
  1400                                  
  1401 00001145 5A                          pop dx
  1402 00001146 59                          pop cx
  1403 00001147 58                          pop ax
  1404                                  
  1405 00001148 5D                          pop bp
  1406 00001149 C3                          ret
  1407                                  
  1408                                  
  1409                                  ; doesn't handle substrings
  1410                                  ; returns answer in zero flag
  1411                                  check_packet:
  1412                                      ; Parameters:
  1413                                      ; [bp + 4] - packet to check against
  1414                                  
  1415 0000114A 55                          push bp
  1416 0000114B 89E5                        mov bp, sp
  1417                                  
  1418 0000114D 50                          push ax
  1419 0000114E 51                          push cx
  1420 0000114F 56                          push si
  1421 00001150 57                          push di
  1422 00001151 06                          push es
  1423                                  
  1424 00001152 1E                          push ds
  1425 00001153 07                          pop es
  1426                                  
  1427 00001154 B000                        mov al, 0
  1428 00001156 B90002                      mov cx, ARRAY_SIZE
  1429 00001159 8B7E04                      mov di, [bp + 4]
  1430                                  
  1431 0000115C FC                          cld
  1432 0000115D F2AE                        repne scasb
  1433                                  
  1434 0000115F B80002                      mov ax, ARRAY_SIZE
  1435 00001162 29C8                        sub ax, cx
  1436 00001164 48                          dec ax
  1437 00001165 89C1                        mov cx, ax
  1438                                  
  1439 00001167 8B7E04                      mov di, [bp + 4]
  1440 0000116A BE[E500]                    mov si, packet + 1
  1441                                  
  1442 0000116D F3A6                        repe cmpsb
  1443                                  
  1444 0000116F 07                          pop es
  1445 00001170 5F                          pop di
  1446 00001171 5E                          pop si
  1447 00001172 59                          pop cx
  1448 00001173 58                          pop ax
  1449                                  
  1450 00001174 5D                          pop bp
  1451 00001175 C20200                      ret 2
  1452                                  
  1453                                  
  1454                                  
  1455                                  printdebug:
  1456 00001178 E8C200                      call clrscrn
  1457                                  
  1458 0000117B BE0600                      mov si, 6
  1459 0000117E B90C00                      mov cx, 12
  1460 00001181 B80000                      mov ax, 0
  1461 00001184 BB0500                      mov bx, 5
  1462                                  
  1463                                  l3:
  1464 00001187 50                          push ax
  1465 00001188 53                          push bx
  1466 00001189 8B12                        mov dx, [bp + si]
  1467 0000118B 52                          push dx
  1468 0000118C E86100                      call printnum
  1469 0000118F 83EE02                      sub si, 2
  1470 00001192 40                          inc ax
  1471 00001193 E2F2                        loop l3
  1472                                  
  1473 00001195 B80000                      mov ax, 0
  1474 00001198 BB0000                      mov bx, 0
  1475 0000119B B90C00                      mov cx, 12
  1476 0000119E BE0400                      mov si, 4
  1477 000011A1 BA[9700]                    mov dx, names
  1478                                  
  1479                                  l1:
  1480 000011A4 50                          push ax
  1481 000011A5 53                          push bx
  1482 000011A6 52                          push dx
  1483 000011A7 56                          push si
  1484 000011A8 E80700                      call printstr
  1485 000011AB 83C204                      add dx, 4
  1486 000011AE 40                          inc ax
  1487 000011AF E2F3                        loop l1
  1488                                  
  1489 000011B1 C3                          ret
  1490                                  
  1491                                  
  1492 000011B2 55                      printstr: push bp
  1493 000011B3 89E5                    mov bp, sp
  1494 000011B5 06                      push es
  1495 000011B6 50                      push ax
  1496 000011B7 53                      push bx
  1497 000011B8 51                      push cx
  1498 000011B9 52                      push dx
  1499 000011BA 56                      push si
  1500 000011BB 57                      push di
  1501 000011BC B800B8                  mov ax, 0xb800
  1502 000011BF 8EC0                    mov es, ax ; point es to video base
  1503 000011C1 BF5000                  mov di, 80 ; load di with columns per row
  1504 000011C4 8B460A                  mov ax, [bp+10] ; load ax with row number
  1505 000011C7 F7E7                    mul di ; multiply with columns per row
  1506 000011C9 89C7                    mov di, ax ; save result in di
  1507 000011CB 037E08                  add di, [bp+8] ; add column number
  1508 000011CE D1E7                    shl di, 1 ; turn into byte count
  1509 000011D0 8B7606                  mov si, [bp+6] ; string to be printed
  1510 000011D3 8B4E04                  mov cx, [bp+4] ; length of string
  1511 000011D6 B407                    mov ah, 0x07 ; normal attribute is fixed
  1512 000011D8 8A04                    nextchar: mov al, [si] ; load next char of string
  1513 000011DA 268905                  mov [es:di], ax ; show next char on screen
  1514 000011DD 83C702                  add di, 2 ; move to next screen location
  1515 000011E0 83C601                  add si, 1 ; move to next char
  1516 000011E3 E2F3                    loop nextchar ; repeat the operation cx times
  1517 000011E5 5F                      pop di
  1518 000011E6 5E                      pop si
  1519 000011E7 5A                      pop dx
  1520 000011E8 59                      pop cx
  1521 000011E9 5B                      pop bx
  1522 000011EA 58                      pop ax
  1523 000011EB 07                      pop es
  1524 000011EC 5D                      pop bp
  1525 000011ED C20800                  ret 8
  1526                                  
  1527                                  
  1528 000011F0 55                      printnum: push bp
  1529 000011F1 89E5                    mov bp, sp
  1530 000011F3 06                      push es
  1531 000011F4 50                      push ax
  1532 000011F5 53                      push bx
  1533 000011F6 51                      push cx
  1534 000011F7 52                      push dx
  1535 000011F8 57                      push di
  1536 000011F9 BF5000                  mov di, 80 ; load di with columns per row
  1537 000011FC 8B4608                  mov ax, [bp+8] ; load ax with row number
  1538 000011FF F7E7                    mul di ; multiply with columns per row
  1539 00001201 89C7                    mov di, ax ; save result in di
  1540 00001203 037E06                  add di, [bp+6] ; add column number
  1541 00001206 D1E7                    shl di, 1 ; turn into byte count
  1542 00001208 83C708                  add di, 8 ; to end of number location
  1543 0000120B B800B8                  mov ax, 0xb800
  1544 0000120E 8EC0                    mov es, ax ; point es to video base
  1545 00001210 8B4604                  mov ax, [bp+4] ; load number in ax
  1546 00001213 BB1000                  mov bx, 16 ; use base 16 for division
  1547 00001216 B90400                  mov cx, 4 ; initialize count of digits
  1548 00001219 BA0000                  nextdigit: mov dx, 0 ; zero upper half of dividend
  1549 0000121C F7F3                    div bx ; divide by 10
  1550 0000121E 80C230                  add dl, 0x30 ; convert digit into ascii value
  1551 00001221 80FA39                  cmp dl, 0x39 ; is the digit an alphabet
  1552 00001224 7603                    jbe skipalpha ; no, skip addition
  1553 00001226 80C207                  add dl, 7 ; yes, make in alphabet code
  1554 00001229 B607                    skipalpha: mov dh, 0x07 ; attach normal attribute
  1555 0000122B 268915                  mov [es:di], dx ; print char on screen
  1556 0000122E 83EF02                  sub di, 2 ; to previous screen location
  1557 00001231 E2E6                    loop nextdigit ; if no divide it again
  1558 00001233 5F                      pop di
  1559 00001234 5A                      pop dx
  1560 00001235 59                      pop cx
  1561 00001236 5B                      pop bx
  1562 00001237 58                      pop ax
  1563 00001238 07                      pop es
  1564 00001239 5D                      pop bp
  1565 0000123A C20600                  ret 6
  1566                                  
  1567                                  
  1568 0000123D 06                      clrscrn: push es
  1569 0000123E 50                      push ax
  1570 0000123F 57                      push di
  1571 00001240 B800B8                  mov ax, 0xb800
  1572 00001243 8EC0                    mov es, ax ; point es to video base
  1573 00001245 BF0000                  mov di, 0 ; point di to top left column
  1574 00001248 26C7052007              nextloc: mov word [es:di], 0x0720 ; clear next char on screen
  1575 0000124D 83C702                  add di, 2 ; move to next screen location
  1576 00001250 81FFA00F                cmp di, 4000 ; has the whole screen cleared
  1577 00001254 75F2                    jne nextloc ; if no clear next position
  1578 00001256 5F                      pop di
  1579 00001257 58                      pop ax
  1580 00001258 07                      pop es
  1581 00001259 C3                      ret
  1582                                  
  1583 0000125A 000000000000000000-     tempregs:       dw 0, 0, 0, 0, 0       ; SS, SP, BP, AX, BX
  1583 00001263 00                 
  1584 00001264 0000<rep 200h>          parentstack:    times ARRAY_SIZE dw 0
