     1                                  ; CHECK ALL PACKET INPUTS
     2                                  ; CHECK ALL PACKET OUTPUTS
     3                                  ; implement custom stack for parent process so that parent does not hog child process stack
     4                                  ; check why exit not sent (2) debugger does not exit after program exits (3) as long as connection exists gdb won't exit
     5                                  ; improve documentation
     6                                  ; remove extraneous stuff 
     7                                  ; wherever CS is used, compare with childseg and fix it if not equal (2) no idea where where used. 2 are in trapisr and brkisr
     8                                  
     9                                  [org 0x0100]
    10                                  
    11 00000000 EB00                        jmp start
    12                                  
    13                                  ;-----macro definitions-----
    14                                  %define ARRAY_SIZE 512
    15                                  %define MCR 0x03FC
    16                                  %define IER 0x03F9
    17                                  
    18                                  start:
    19                                      ;-----initialize COM port for debugging-----
    20 00000002 B400                        mov ah, 0
    21 00000004 B0E3                        mov al, 0xE3
    22 00000006 31D2                        xor dx, dx
    23 00000008 CD14                        int 0x14
    24                                  
    25                                      ;-----hook interrupt service routines-----
    26 0000000A E8C700                      call hookISR
    27                                  
    28                                      ;-----read file path-----
    29 0000000D 31C9                        xor cx, cx
    30 0000000F 8A0E8000                    mov cl, [0x80]
    31 00000013 80F901                      cmp cl, 1
    32 00000016 0F8C9C00                    jl no_filepath
    33                                  
    34                                      ; remove trailing spaces
    35 0000001A FEC9                        dec cl
    36 0000001C BE8200                      mov si, 0x82
    37 0000001F BF[D509]                    mov di, filepath
    38 00000022 FC                          cld
    39 00000023 F3A4                        rep movsb
    40                                  
    41                                      ;-----resizing memory for debugger-----
    42 00000025 BB[8912]                    mov bx, parentstack
    43 00000028 81C30F04                    add bx, 1024 + 15
    44 0000002C C1EB04                      shr bx, 4
    45                                  
    46 0000002F 8CC8                        mov ax, cs
    47 00000031 8EC0                        mov es, ax
    48 00000033 B44A                        mov ah, 0x4A
    49 00000035 CD21                        int 0x21
    50                                  
    51                                      ;-----allocating memory for child process-----
    52 00000037 B80048                      mov ax, 0x4800
    53 0000003A BB0010                      mov bx, 0x1000
    54 0000003D CD21                        int 0x21
    55 0000003F 727F                        jc no_memory_available
    56 00000041 A3[550A]                    mov [childseg], ax
    57                                  
    58                                      ;-----creating psp for child process-----
    59 00000044 B455                        mov ah, 0x55
    60 00000046 8B16[550A]                  mov dx, [childseg]
    61 0000004A BE0000                      mov si, 0
    62 0000004D CD21                        int 0x21
    63                                  
    64                                      ;-----open .COM file-----
    65 0000004F B8003D                      mov ax, 0x3D00
    66 00000052 BA[D509]                    mov dx, filepath
    67 00000055 CD21                        int 0x21
    68 00000057 7262                        jc file_not_found
    69                                  
    70                                      ;-----load .COM file into memory-----
    71 00000059 1E                          push ds
    72                                  
    73 0000005A 89C3                        mov bx, ax
    74 0000005C B43F                        mov ah, 0x3F
    75 0000005E B9FFFF                      mov cx, 0xFFFF
    76 00000061 BA0001                      mov dx, 0x0100
    77 00000064 8E1E[550A]                  mov ds, [childseg]
    78 00000068 CD21                        int 0x21
    79 0000006A 7259                        jc file_not_read
    80                                  
    81 0000006C 1F                          pop ds
    82                                  
    83                                      ;-----close .COM file-----
    84 0000006D B43E                        mov ah, 0x3E
    85 0000006F CD21                        int 0x21
    86                                  
    87                                      ;-----initialize registers-----
    88 00000071 8926[C309]                  mov [orig_sp], sp
    89 00000075 BCFEFF                      mov sp, 0xFFFE
    90                                  
    91 00000078 A1[550A]                    mov ax, [childseg]
    92 0000007B 8ED8                        mov ds, ax
    93 0000007D 8ED0                        mov ss, ax
    94 0000007F 8EC0                        mov es, ax
    95                                  
    96 00000081 9C                          pushf
    97 00000082 50                          push ax
    98 00000083 680001                      push word 0x0100
    99                                  
   100                                  wait_for_continue:
   101                                      ; wait till first continue packet arrives
   102 00000086 2E803E[770C]01              cmp byte [cs:startprogram], 1
   103 0000008C 75F8                        jne wait_for_continue
   104                                  
   105                                      ; reset as program is continuing (allegedly)
   106 0000008E 2EC606[750C]00              mov byte [cs:inprocessing], 0
   107                                  
   108 00000094 CF                          iret
   109                                  
   110                                      ;-----come back to original process-----
   111                                  return_to_parent:
   112                                      ; reset parent's registers
   113 00000095 8CC8                        mov ax, cs
   114 00000097 8ED8                        mov ds, ax
   115 00000099 8ED0                        mov ss, ax
   116 0000009B 8EC0                        mov es, ax
   117 0000009D 8B26[C309]                  mov sp, [orig_sp]
   118                                  
   119                                      ; send reply to gdb that child exitted
   120 000000A1 803E[770C]00                cmp byte [startprogram], 0
   121 000000A6 7406                        jz child_skipped
   122                                  
   123 000000A8 68[9809]                    push word exitreply
   124 000000AB E81C06                      call send_reply
   125                                  
   126                                  child_skipped:
   127 000000AE E8AA00                      call unhookISR
   128                                  
   129 000000B1 B8004C                      mov ax, 0x4C00
   130 000000B4 CD21                        int 0x21
   131                                  
   132                                  
   133                                  ;-----error handling-----
   134                                  no_filepath:
   135 000000B6 BA[7108]                    mov dx, no_filepath_msg
   136                                  
   137 000000B9 EB10                        jmp handle_error
   138                                  
   139                                  file_not_found:
   140 000000BB BA[8B08]                    mov dx, file_not_found_msg
   141                                  
   142 000000BE EB0B                        jmp handle_error
   143                                  
   144                                  no_memory_available:
   145 000000C0 BA[A308]                    mov dx, no_mem_aval_msg
   146                                  
   147 000000C3 EB06                        jmp handle_error
   148                                  
   149                                  file_not_read:
   150 000000C5 1F                          pop ds
   151 000000C6 BA[C608]                    mov dx, file_not_read_msg
   152                                  
   153 000000C9 EB00                        jmp handle_error
   154                                  
   155                                  handle_error:
   156 000000CB B409                        mov ah, 0x09
   157 000000CD CD21                        int 0x21
   158                                  
   159 000000CF B8004C                      mov ax, 0x4C00
   160 000000D2 CD21                        int 0x21
   161                                  
   162                                  
   163                                  ;-------------------------ISR functions-------------------------
   164                                  
   165                                  ; function for hooking all necessary ISRs and initializing COM ports
   166                                  hookISR: 
   167 000000D4 50                          push ax
   168 000000D5 06                          push es
   169                                  
   170 000000D6 31C0                        xor ax, ax
   171 000000D8 8EC0                        mov es, ax
   172                                  
   173                                      ; saving original ISRs
   174                                  
   175                                      ; single step trap
   176                                      ; (int 1h)
   177 000000DA 26A10400                    mov ax, [es:0x1 * 4]
   178 000000DE A3[C509]                    mov [oldtrapisr], ax
   179 000000E1 26A10600                    mov ax, [es:0x1 * 4 + 2]
   180 000000E5 A3[C709]                    mov [oldtrapisr + 2], ax
   181                                      ; breakpoint trap
   182                                      ; (int 3h)
   183 000000E8 26A10C00                    mov ax, [es:0x3 * 4]
   184 000000EC A3[C909]                    mov [oldbrkisr], ax
   185 000000EF 26A10E00                    mov ax, [es:0x3 * 4 + 2]
   186 000000F3 A3[CB09]                    mov [oldbrkisr + 2], ax
   187                                      ; COM port interrupt
   188                                      ; (int 0Ch)
   189 000000F6 26A13000                    mov ax, [es:0xC * 4]
   190 000000FA A3[CD09]                    mov [oldcomisr], ax
   191 000000FD 26A13200                    mov ax, [es:0xC * 4 + 2]
   192 00000101 A3[CF09]                    mov [oldcomisr + 2], ax
   193                                      ; return to parent process interrupt
   194                                      ; (int 22h)
   195 00000104 26A18800                    mov ax, [es:0x22 * 4]
   196 00000108 A3[D109]                    mov [oldretisr], ax
   197 0000010B 26A18A00                    mov ax, [es:0x22 * 4 + 2]
   198 0000010F A3[D309]                    mov [oldretisr + 2], ax
   199                                  
   200                                      ; hooking ISRs
   201                                  
   202 00000112 FA                          cli
   203                                  
   204                                      ; single step trap
   205 00000113 26C7060400[B101]            mov word [es:0x1 * 4], trapisr
   206 0000011A 268C0E0600                  mov [es:0x1 * 4 + 2], cs
   207                                      ; breakpoint trap
   208 0000011F 26C7060C00[1102]            mov word [es:0x3 * 4], brkisr
   209 00000126 268C0E0E00                  mov [es:0x3 * 4 + 2], cs
   210                                      ; COM port interrupt
   211 0000012B 26C7063000[7A02]            mov word [es:0xC * 4], comisr
   212 00000132 268C0E3200                  mov [es:0xC * 4 + 2], cs
   213                                      ; return to parent process interrupt
   214 00000137 26C7068800[9500]            mov word [es:0x22 * 4], return_to_parent
   215 0000013E 268C0E8A00                  mov [es:0x22 * 4 + 2], cs
   216                                  
   217                                      ; enabling interrupts
   218                                  
   219                                      ; enable OUT2
   220 00000143 BAFC03                      mov dx, MCR
   221 00000146 EC                          in al, dx
   222 00000147 0C08                        or al, 8 ; enable bit 3 (OUT2)
   223 00000149 EE                          out dx, al
   224                                      ; enable IER
   225 0000014A BAF903                      mov dx, IER
   226 0000014D EC                          in al, dx
   227 0000014E 0C01                        or al, 1
   228 00000150 EE                          out dx, al
   229                                      ; enable PIC 
   230 00000151 E421                        in al, 0x21
   231 00000153 24EF                        and al, 0xEF
   232 00000155 E621                        out 0x21, al
   233                                  
   234 00000157 FB                          sti
   235                                  
   236 00000158 07                          pop es
   237 00000159 58                          pop ax
   238                                  
   239 0000015A C3                          ret
   240                                  
   241                                  
   242                                  ; function for unhooking all ISRs and disabling COM ports
   243                                  unhookISR:
   244 0000015B 50                          push ax
   245 0000015C 06                          push es
   246                                  
   247 0000015D 31C0                        xor ax, ax
   248 0000015F 8EC0                        mov es, ax
   249                                  
   250                                      ; restoring original ISRs
   251                                  
   252 00000161 FA                          cli
   253                                  
   254                                      ; single step trap
   255                                      ; (int 1h)
   256 00000162 A1[C509]                    mov ax, [oldtrapisr]
   257 00000165 26A30400                    mov [es:0x1 * 4], ax
   258 00000169 A1[C709]                    mov ax, [oldtrapisr + 2]
   259 0000016C 26A30600                    mov [es:0x1 * 4 + 2], ax
   260                                      ; breakpoint trap
   261                                      ; (int 3h)
   262 00000170 A1[C909]                    mov ax, [oldbrkisr]
   263 00000173 26A30C00                    mov [es:0x3 * 4], ax
   264 00000177 A1[CB09]                    mov ax, [oldbrkisr + 2]
   265 0000017A 26A30E00                    mov [es:0x3 * 4 + 2], ax
   266                                      ; COM port interrupt
   267                                      ; (int 0Ch)
   268 0000017E A1[CD09]                    mov ax, [oldcomisr]
   269 00000181 26A33000                    mov [es:0xC * 4], ax
   270 00000185 A1[CF09]                    mov ax, [oldcomisr + 2]
   271 00000188 26A33200                    mov [es:0xC * 4 + 2], ax
   272                                      ; return to parent process interrupt
   273                                      ; (int 22h)
   274 0000018C A1[D109]                    mov ax, [oldretisr]
   275 0000018F 26A38800                    mov [es:0x22 * 4], ax
   276 00000193 A1[D309]                    mov ax, [oldretisr + 2]
   277 00000196 26A38A00                    mov [es:0x22 * 4 + 2], ax
   278                                  
   279                                      ; disabling interrupts
   280                                  
   281                                      ; disable OUT2
   282 0000019A BAFC03                      mov dx, MCR
   283 0000019D EC                          in al, dx
   284 0000019E 24F7                        and al, 0xF7 ; disable bit 3 (OUT2)
   285 000001A0 EE                          out dx, al
   286                                      ; disable IER
   287 000001A1 BAF903                      mov dx, IER
   288 000001A4 30C0                        xor al, al
   289 000001A6 EE                          out dx, al
   290                                      ; disable PIC 
   291 000001A7 E421                        in al, 0x21
   292 000001A9 0C10                        or al, 0x10
   293 000001AB E621                        out 0x21, al
   294                                  
   295 000001AD FB                          sti
   296                                  
   297 000001AE 07                          pop es
   298 000001AF 58                          pop ax
   299                                  
   300 000001B0 C3                          ret
   301                                  
   302                                  
   303                                  ; (int 0x1)
   304                                  trapisr:
   305 000001B1 55                          push bp
   306 000001B2 89E5                        mov bp, sp
   307                                  
   308 000001B4 60                          pusha
   309 000001B5 1E                          push ds
   310 000001B6 06                          push es
   311                                  
   312 000001B7 0E                          push cs
   313 000001B8 1F                          pop ds
   314                                  
   315                                      ; check if breakpoint was set in previous instruction
   316 000001B9 803E[7A0C]01                cmp byte [reinstallbrk], 1
   317 000001BE 7518                        jne resume_trap_activity
   318                                  
   319 000001C0 B0CC                        mov al, 0xCC
   320 000001C2 8B3E[7B0C]                  mov di, [tempbrkaddr]
   321 000001C6 8E06[550A]                  mov es, [childseg]
   322 000001CA C606[7A0C]00                mov byte [reinstallbrk], 0
   323                                  
   324 000001CF FC                          cld
   325 000001D0 AA                          stosb
   326                                  
   327                                      ; if this is a force step for reinstalling breakpoint, skip waiting for packet
   328 000001D1 803E[780C]01                cmp byte [forcepause], 1
   329 000001D6 741B                        jz packet_continue
   330                                  
   331                                  resume_trap_activity:
   332 000001D8 E82401                      call debug_activity
   333                                      
   334                                      ; wait for comisr to receive a packet
   335 000001DB FB                          sti
   336                                  
   337                                  wait_packet:
   338 000001DC 803E[750C]00                cmp byte [inprocessing], 0
   339 000001E1 74F9                        je wait_packet
   340                                  
   341 000001E3 803E[740A]73                cmp byte [packet + 1], 's'
   342 000001E8 7410                        je packet_step
   343                                  
   344 000001EA 803E[740A]63                cmp byte [packet + 1], 'c'
   345 000001EF 7402                        je packet_continue
   346                                  
   347 000001F1 EBE9                        jmp wait_packet
   348                                  
   349                                  packet_continue:
   350 000001F3 816606FFFE                  and word [bp + 6], 0xFEFF
   351                                  
   352 000001F8 EB08                        jmp wait_packet_done
   353                                  
   354                                  packet_step:
   355 000001FA 814E060001                  or word [bp + 6], 0x0100
   356                                  
   357 000001FF E8E300                      call check_interrupt
   358                                  
   359                                  wait_packet_done:
   360 00000202 C606[750C]00                mov byte [inprocessing], 0
   361 00000207 C606[780C]00                mov byte [forcepause], 0
   362                                  
   363 0000020C 07                          pop es
   364 0000020D 1F                          pop ds
   365 0000020E 61                          popa
   366                                  
   367 0000020F 5D                          pop bp
   368 00000210 CF                          iret
   369                                  
   370                                  
   371                                  ; (int 0x3)
   372                                  brkisr:
   373 00000211 55                          push bp
   374 00000212 89E5                        mov bp, sp
   375                                  
   376 00000214 60                          pusha
   377 00000215 1E                          push ds
   378 00000216 06                          push es
   379                                  
   380 00000217 0E                          push cs
   381 00000218 1F                          pop ds
   382                                  
   383                                      ; adjust ip to re-execute the instruction after the breakpoint
   384 00000219 FF4E02                      dec word [bp + 2]
   385                                  
   386                                      ; restore the opcode so that the program can continue
   387                                      ; ----- ideally check if es contains the same segment as childseg and fix ip if not
   388 0000021C 8E4604                      mov es, [bp + 4]
   389 0000021F 8B7E02                      mov di, [bp + 2]
   390                                  
   391                                      ; check if normal or temporary interrupt breakpoint was set
   392 00000222 803E[790C]CC                cmp byte [intopcode], 0xCC
   393 00000227 740B                        je normal_breakpoint
   394                                  
   395 00000229 A0[790C]                    mov al, [intopcode]
   396                                      ; reset with breakpoint opcode to differentiate. also helps if a breakpoint is already set
   397 0000022C C606[790C]CC                mov byte [intopcode], 0xCC
   398                                  
   399 00000231 AA                          stosb
   400                                  
   401 00000232 EB14                        jmp resume_brk_activity
   402                                  
   403                                  normal_breakpoint:
   404                                      ; set flags to indicate re-installation of breakpoint
   405 00000234 C606[7A0C]01                mov byte [reinstallbrk], 1
   406 00000239 893E[7B0C]                  mov word [tempbrkaddr], di
   407                                  
   408                                      ; find the opcode in the opcodes array
   409 0000023D 57                          push di
   410 0000023E E86203                      call find_opcode
   411 00000241 5E                          pop si
   412                                  
   413 00000242 81C6[7F0C]                  add si, opcodes
   414                                  
   415                                      ; restore the original opcode
   416 00000246 AC                          lodsb
   417 00000247 AA                          stosb
   418                                  
   419                                  resume_brk_activity:
   420 00000248 E8B400                      call debug_activity
   421                                      
   422                                      ; wait for comisr to receive a packet
   423 0000024B FB                          sti
   424                                  
   425                                  trap_wait:
   426 0000024C 803E[750C]00                cmp byte [inprocessing], 0
   427 00000251 74F9                        je trap_wait
   428                                  
   429 00000253 803E[740A]73                cmp byte [packet + 1], 's'
   430 00000258 740E                        je normal_step
   431                                  
   432 0000025A 803E[740A]63                cmp byte [packet + 1], 'c'
   433 0000025F 7402                        je force_step
   434                                  
   435 00000261 EBE9                        jmp trap_wait
   436                                  
   437                                      ; step in both cases. for continue set flag so that trapisr does not wait for another packet
   438                                  force_step:
   439 00000263 C606[780C]01                mov byte [forcepause], 1
   440                                  
   441                                  normal_step:
   442                                      ; clear the inprocessing flag and do not wait in wait_packet
   443 00000268 C606[750C]00                mov byte [inprocessing], 0
   444                                      ; initialize trap flag for breakpoint restoration
   445 0000026D 814E060001                  or word [bp + 6], 0x0100
   446                                  
   447 00000272 E87000                      call check_interrupt
   448                                  
   449 00000275 07                          pop es
   450 00000276 1F                          pop ds
   451 00000277 61                          popa
   452                                  
   453 00000278 5D                          pop bp
   454 00000279 CF                          iret
   455                                  
   456                                  
   457                                  ; (int 0xC)
   458                                  comisr:
   459 0000027A 55                          push bp
   460 0000027B 89E5                        mov bp, sp
   461                                  
   462 0000027D 60                          pusha
   463 0000027E 1E                          push ds
   464 0000027F 06                          push es
   465                                  
   466 00000280 0E                          push cs
   467 00000281 0E                          push cs
   468 00000282 1F                          pop ds
   469 00000283 07                          pop es
   470                                  
   471 00000284 BAFA03                      mov dx, 0x3FA
   472 00000287 EC                          in al, dx
   473 00000288 240F                        and al, 0x0F
   474                                  
   475 0000028A 3C04                        cmp al, 4
   476 0000028C 754E                        jne nodata
   477                                  
   478 0000028E BAF803                      mov dx, 0x3F8
   479 00000291 EC                          in al, dx
   480                                  
   481 00000292 3C24                        cmp al, '$'
   482 00000294 750D                        jne insidepacket
   483                                  
   484 00000296 C706[730C][730A]            mov word [packettail], packet
   485 0000029C C606[760C]00                mov byte [chksum], 0
   486                                  
   487 000002A1 EB16                        jmp storepacket
   488                                  
   489                                  insidepacket:
   490                                      ; skip if noise meaning packet not started
   491 000002A3 803E[730A]00                cmp byte [packet], 0
   492 000002A8 7432                        je nodata
   493                                  
   494 000002AA 3C23                        cmp al, '#'
   495 000002AC 7407                        je chksumstarted
   496                                  
   497 000002AE 803E[760C]00                cmp byte [chksum], 0
   498 000002B3 7404                        je storepacket
   499                                  
   500                                  chksumstarted:
   501 000002B5 FE06[760C]                  inc byte [chksum]
   502                                  
   503                                  storepacket:
   504 000002B9 8B1E[730C]                  mov bx, [packettail]
   505 000002BD 8807                        mov [bx], al
   506                                  
   507 000002BF FF06[730C]                  inc word [packettail]
   508                                  
   509                                      ; check if packet is complete
   510 000002C3 803E[760C]03                cmp byte [chksum], 3
   511 000002C8 7512                        jne nodata
   512                                  
   513                                      ; send acknowledgment
   514 000002CA 6A2B                        push word '+'
   515 000002CC E8AA03                      call send_byte
   516                                  
   517                                      ; setting packet processing flag
   518 000002CF C606[750C]01                mov byte [inprocessing], 1
   519                                      ; remove $ from packet to signify packet completion
   520 000002D4 C606[730A]00                mov byte [packet], 0
   521                                  
   522                                      ; process the received packet
   523 000002D9 E87F00                      call packet_processor
   524                                  
   525                                  nodata: 
   526 000002DC B020                        mov al, 0x20
   527 000002DE E620                        out 0x20, al
   528                                  
   529 000002E0 07                          pop es
   530 000002E1 1F                          pop ds
   531 000002E2 61                          popa
   532                                      
   533 000002E3 5D                          pop bp
   534 000002E4 CF                          iret
   535                                  
   536                                  
   537                                  ;-------------------------debug helper functions-------------------------
   538                                  
   539                                  ; check for interrupt instruction and apply temporary breakpoint
   540                                  check_interrupt:
   541 000002E5 8E4604                      mov es, [bp + 4]
   542 000002E8 8B7E02                      mov di, [bp + 2]
   543 000002EB 268A05                      mov al, [es:di]
   544                                  
   545                                      ; check if next instruction is an interrupt
   546 000002EE 3CCD                        cmp al, 0xCD
   547 000002F0 750C                        jne check_interrupt_done
   548                                  
   549                                      ; store next instructions opcode. if already a breakpoint then will ignore it due to default value
   550 000002F2 268A4502                    mov al, [es:di + 2]
   551 000002F6 A2[790C]                    mov [intopcode], al
   552                                      ; apply temporary breakpoint and will be restored in brkisr
   553 000002F9 26C64502CC                  mov byte [es:di + 2], 0xCC
   554                                  
   555                                  check_interrupt_done:
   556 000002FE C3                          ret
   557                                  
   558                                  
   559                                  ; actions performed when debugger stops at instruction
   560                                  debug_activity:
   561                                      ; send reply to gdb that child stopped
   562 000002FF 68[7509]                    push word stopreply
   563 00000302 E8C503                      call send_reply
   564                                  
   565                                      ; saving registers
   566 00000305 8B46FE                      mov ax, [bp - 2]
   567 00000308 A3[570A]                    mov [regs + 0], ax  ; AX
   568 0000030B 8B46F8                      mov ax, [bp - 8]
   569 0000030E A3[590A]                    mov [regs + 2], ax  ; BX
   570 00000311 8B46FC                      mov ax, [bp - 4]
   571 00000314 A3[5B0A]                    mov [regs + 4], ax  ; CX
   572 00000317 8B46FA                      mov ax, [bp - 6]
   573 0000031A A3[5D0A]                    mov [regs + 6], ax  ; DX
   574 0000031D 8B46F2                      mov ax, [bp - 14]
   575 00000320 A3[5F0A]                    mov [regs + 8], ax  ; SI
   576 00000323 8B46F0                      mov ax, [bp - 16]
   577 00000326 A3[610A]                    mov [regs + 10], ax ; DI
   578 00000329 8B4600                      mov ax, [bp]
   579 0000032C A3[630A]                    mov [regs + 12], ax ; BP
   580 0000032F 8B46F6                      mov ax, [bp - 10]
   581 00000332 83E808                      sub ax, 8
   582 00000335 A3[650A]                    mov [regs + 14], ax ; SP
   583 00000338 8B4602                      mov ax, [bp + 2]
   584 0000033B A3[670A]                    mov [regs + 16], ax ; IP
   585 0000033E 8B4606                      mov ax, [bp + 6]
   586 00000341 A3[690A]                    mov [regs + 18], ax ; FLAGS
   587 00000344 8B4604                      mov ax, [bp + 4]
   588 00000347 A3[6B0A]                    mov [regs + 20], ax ; CS
   589 0000034A 8B46EE                      mov ax, [bp - 18]
   590 0000034D A3[6D0A]                    mov [regs + 22], ax ; DS
   591 00000350 8B46EC                      mov ax, [bp - 20]
   592 00000353 A3[6F0A]                    mov [regs + 24], ax ; ES
   593 00000356 8C16[710A]                  mov [regs + 26], ss ; SS
   594                                  
   595 0000035A C3                          ret
   596                                  
   597                                  
   598                                  ;-------------------------packet processing functions-------------------------
   599                                  packet_processor:
   600 0000035B A0[740A]                    mov al, [packet + 1]
   601 0000035E BF[A009]                    mov di, availpacks
   602 00000361 8B0E[C109]                  mov cx, [packslength]
   603                                  
   604                                      ; check general packets
   605 00000365 68[DD08]                    push word supportPack
   606 00000368 E84D04                      call check_packet
   607 0000036B 7459                        jz gdb_support
   608                                  
   609 0000036D 68[E808]                    push word contPack
   610 00000370 E84504                      call check_packet
   611 00000373 7459                        jz gdb_unknown
   612                                  
   613 00000375 68[EF08]                    push word mustreplyPack
   614 00000378 E83D04                      call check_packet
   615 0000037B 7451                        jz gdb_unknown
   616                                  
   617 0000037D 68[FF08]                    push word multiPack
   618 00000380 E83504                      call check_packet
   619 00000383 7451                        jz gdb_ok
   620                                  
   621 00000385 68[0309]                    push word threadPack
   622 00000388 E82D04                      call check_packet
   623 0000038B 7451                        jz gdb_single_thread
   624                                  
   625 0000038D 68[1009]                    push word endthreadPack
   626 00000390 E82504                      call check_packet
   627 00000393 7451                        jz gdb_end_list
   628                                  
   629 00000395 68[1D09]                    push word attachedPack
   630 00000398 E81D04                      call check_packet
   631 0000039B 7451                        jz gdb_child_process
   632                                  
   633 0000039D 68[2709]                    push word currthreadPack
   634 000003A0 E81504                      call check_packet
   635 000003A3 7431                        jz gdb_ok
   636                                  
   637 000003A5 68[2C09]                    push word querycurrPack
   638 000003A8 E80D04                      call check_packet
   639 000003AB 7449                        jz gdb_curr_thread
   640                                  
   641                                      ; find respective packet type
   642 000003AD FC                          cld
   643 000003AE F2AE                        repne scasb
   644 000003B0 7402                        jz found_packet
   645                                  
   646 000003B2 EB1A                        jmp gdb_unknown
   647                                  
   648                                  found_packet:
   649 000003B4 81EF[A109]                  sub di, availpacks + 1
   650 000003B8 D1E7                        shl di, 1
   651 000003BA 81C7[AB09]                  add di, addresspacks
   652                                  
   653 000003BE FF25                        jmp [di]
   654                                  
   655                                  terminate_packet_processing:
   656                                      ; toggle packet processing flag
   657 000003C0 8036[750C]01                xor byte [inprocessing], 1
   658                                  
   659 000003C5 C3                          ret
   660                                  
   661                                  
   662                                  gdb_support:
   663 000003C6 68[2F09]                    push word supportreply
   664 000003C9 E8FE02                      call send_reply
   665                                  
   666 000003CC EBF2                        jmp terminate_packet_processing
   667                                  
   668                                  gdb_unknown:
   669 000003CE 68[6109]                    push word nothing
   670 000003D1 E8F602                      call send_reply
   671                                  
   672 000003D4 EBEA                        jmp terminate_packet_processing
   673                                  
   674                                  gdb_ok:
   675 000003D6 68[6609]                    push word okreply
   676 000003D9 E8EE02                      call send_reply
   677                                  
   678 000003DC EBE2                        jmp terminate_packet_processing
   679                                  
   680                                  gdb_single_thread:
   681 000003DE 68[7D09]                    push word singletreply
   682 000003E1 E8E602                      call send_reply
   683                                  
   684 000003E4 EBDA                        jmp terminate_packet_processing
   685                                  
   686                                  gdb_end_list:
   687 000003E6 68[8409]                    push word endlistreply
   688 000003E9 E8DE02                      call send_reply
   689                                  
   690 000003EC EBD2                        jmp terminate_packet_processing
   691                                  
   692                                  gdb_child_process:
   693 000003EE 68[8A09]                    push word childkillreply
   694 000003F1 E8D602                      call send_reply
   695                                  
   696 000003F4 EBCA                        jmp terminate_packet_processing
   697                                  
   698                                  gdb_curr_thread:
   699 000003F6 68[9009]                    push word currthreply
   700 000003F9 E8CE02                      call send_reply
   701                                  
   702 000003FC EBC2                        jmp terminate_packet_processing
   703                                  
   704                                  gdb_why:
   705 000003FE 68[7509]                    push word stopreply
   706 00000401 E8C602                      call send_reply
   707                                  
   708 00000404 EBBA                        jmp terminate_packet_processing
   709                                  
   710                                  
   711                                  gdb_kill:
   712                                      ; no need to send reply
   713 00000406 C606[770C]00                mov byte [startprogram], 0
   714                                  
   715                                      ; terminate the program in child's context
   716 0000040B B8004C                      mov ax, 0x4c00
   717 0000040E CD21                        int 0x21
   718                                  
   719                                  
   720                                  gdb_debugger:
   721                                      ; toggle flag to start the child program's execution
   722 00000410 C606[770C]01                mov byte [startprogram], 1
   723                                      ; toggle flag beforehand so that it remains on and is handle by debugger isrs
   724 00000415 8036[750C]01                xor byte [inprocessing], 1
   725                                  
   726 0000041A EBA4                        jmp terminate_packet_processing
   727                                  
   728                                  
   729                                  gdb_extract_register:
   730 0000041C 68[750A]                    push word packet + 2
   731 0000041F 6A01                        push word 1
   732 00000421 E81A03                      call extract_hex
   733 00000424 5F                          pop di
   734 00000425 58                          pop ax
   735                                  
   736 00000426 D1E7                        shl di, 1
   737 00000428 31C0                        xor ax, ax
   738 0000042A 31DB                        xor bx, bx
   739                                  
   740 0000042C 6A24                        push word '$'
   741 0000042E E84802                      call send_byte
   742                                  
   743 00000431 8A85[570A]                  mov al, [regs + di]
   744 00000435 50                          push ax
   745 00000436 E85D02                      call send_hex
   746 00000439 5B                          pop bx
   747                                  
   748 0000043A 8A85[580A]                  mov al, [regs + di + 1]
   749 0000043E 50                          push ax
   750 0000043F E85402                      call send_hex
   751 00000442 58                          pop ax
   752                                  
   753 00000443 00D8                        add al, bl 
   754                                  
   755 00000445 6A23                        push word '#'
   756 00000447 E82F02                      call send_byte
   757 0000044A 50                          push ax
   758 0000044B E84802                      call send_hex
   759 0000044E 58                          pop ax
   760                                  
   761 0000044F E96EFF                      jmp terminate_packet_processing
   762                                  
   763                                  
   764                                  gdb_send_registers:
   765 00000452 6A24                        push word '$'
   766 00000454 E82202                      call send_byte
   767                                  
   768 00000457 31C0                        xor ax, ax
   769 00000459 31DB                        xor bx, bx
   770 0000045B 31C9                        xor cx, cx
   771 0000045D 31D2                        xor dx, dx
   772                                  
   773                                  nextreg:
   774 0000045F 8A87[570A]                  mov al, [regs + bx]
   775 00000463 50                          push ax
   776 00000464 E82F02                      call send_hex
   777 00000467 58                          pop ax
   778                                      
   779 00000468 00C2                        add dl, al
   780 0000046A 43                          inc bx
   781                                  
   782 0000046B 83FB1C                      cmp bx, 14 * 2
   783 0000046E 75EF                        jne nextreg
   784                                  
   785                                      ; checksum
   786 00000470 6A23                        push word '#'
   787 00000472 E80402                      call send_byte
   788 00000475 52                          push dx
   789 00000476 E81D02                      call send_hex
   790 00000479 5A                          pop dx
   791                                  
   792 0000047A E943FF                      jmp terminate_packet_processing
   793                                  
   794                                  
   795                                  gdb_set_breakpoint:
   796 0000047D B02C                        mov al, ','
   797 0000047F BF[770A]                    mov di, packet + 4
   798 00000482 B90A00                      mov cx, 10
   799                                  
   800 00000485 FC                          cld 
   801 00000486 F2AE                        repne scasb
   802                                  
   803 00000488 81EF[780A]                  sub di, packet + 5
   804                                  
   805 0000048C 68[770A]                    push word packet + 4
   806 0000048F 57                          push di
   807 00000490 E8AB02                      call extract_hex
   808 00000493 E8FE02                      call convert_physical_to_logical
   809 00000496 5F                          pop di
   810 00000497 58                          pop ax
   811                                  
   812 00000498 C1E004                      shl ax, 4
   813 0000049B 01F8                        add ax, di
   814                                  
   815 0000049D 50                          push ax
   816 0000049E E83201                      call push_opcode
   817 000004A1 7209                        jc set_breakpoint_error
   818                                  
   819 000004A3 68[6609]                    push word okreply
   820 000004A6 E82102                      call send_reply
   821                                  
   822 000004A9 E914FF                      jmp terminate_packet_processing
   823                                  
   824                                  set_breakpoint_error:
   825 000004AC 68[6D09]                    push word errorreply
   826 000004AF E81802                      call send_reply
   827                                  
   828 000004B2 E90BFF                      jmp terminate_packet_processing
   829                                  
   830                                  
   831                                  gdb_remove_breakpoint:
   832 000004B5 B02C                        mov al, ','
   833 000004B7 BF[770A]                    mov di, packet + 4
   834 000004BA B90A00                      mov cx, 10
   835                                  
   836 000004BD FC                          cld 
   837 000004BE F2AE                        repne scasb
   838                                  
   839 000004C0 81EF[780A]                  sub di, packet + 5
   840                                  
   841 000004C4 68[770A]                    push word packet + 4
   842 000004C7 57                          push di
   843 000004C8 E87302                      call extract_hex
   844 000004CB E8C602                      call convert_physical_to_logical
   845 000004CE 5F                          pop di
   846 000004CF 58                          pop ax
   847                                  
   848 000004D0 C1E004                      shl ax, 4
   849 000004D3 01F8                        add ax, di
   850                                  
   851 000004D5 50                          push ax
   852 000004D6 E84701                      call remove_opcode
   853 000004D9 7209                        jc remove_breakpoint_error
   854                                  
   855 000004DB 68[6609]                    push word okreply
   856 000004DE E8E901                      call send_reply
   857                                  
   858 000004E1 E9DCFE                      jmp terminate_packet_processing
   859                                  
   860                                  remove_breakpoint_error:
   861 000004E4 68[6D09]                    push word errorreply
   862 000004E7 E8E001                      call send_reply
   863                                  
   864 000004EA E9D3FE                      jmp terminate_packet_processing
   865                                  
   866                                  
   867                                  gdb_read_memory:
   868                                      ; extract length of address in packet
   869 000004ED B02C                        mov al, ','
   870 000004EF BF[750A]                    mov di, packet + 2
   871 000004F2 B90A00                      mov cx, 10
   872                                  
   873 000004F5 FC                          cld
   874 000004F6 F2AE                        repne scasb
   875                                  
   876                                      ; length in bx
   877 000004F8 89FB                        mov bx, di
   878 000004FA 81EB[760A]                  sub bx, packet + 3
   879                                  
   880                                      ; extract length of number of bytes to read
   881 000004FE B023                        mov al, '#'
   882 00000500 B90A00                      mov cx, 10
   883                                  
   884 00000503 F2AE                        repne scasb
   885                                  
   886                                      ; length in cx
   887 00000505 81EF[770A]                  sub di, packet + 4
   888 00000509 29DF                        sub di, bx
   889 0000050B 89F9                        mov cx, di
   890                                  
   891                                      ; extract and convert 32 bit address to segment:offset
   892 0000050D 68[750A]                    push word packet + 2
   893 00000510 53                          push bx
   894 00000511 E82A02                      call extract_hex
   895 00000514 E87D02                      call convert_physical_to_logical
   896 00000517 5F                          pop di
   897 00000518 07                          pop es
   898                                  
   899                                      ; extract number of bytes to read
   900 00000519 B8[760A]                    mov ax, packet + 3
   901 0000051C 01D8                        add ax, bx
   902                                      
   903 0000051E 50                          push ax
   904 0000051F 51                          push cx
   905 00000520 E81B02                      call extract_hex
   906 00000523 59                          pop cx
   907 00000524 58                          pop ax
   908                                  
   909 00000525 31C0                        xor ax, ax
   910 00000527 31D2                        xor dx, dx
   911                                      ; mov es, [childseg]        ; dunnno what to do with this
   912                                  
   913 00000529 6A24                        push word '$'
   914 0000052B E84B01                      call send_byte
   915                                  
   916                                  read_memory_loop:
   917 0000052E 268A05                      mov al, [es:di]
   918 00000531 50                          push ax
   919 00000532 E86101                      call send_hex
   920 00000535 58                          pop ax
   921                                  
   922 00000536 00C2                        add dl, al
   923 00000538 47                          inc di
   924                                  
   925                                      ; handling segment wrap for large memory reads
   926 00000539 83FF00                      cmp di, 0
   927 0000053C 7507                        jne no_wrap_in_memory
   928                                  
   929 0000053E 8CC0                        mov ax, es
   930 00000540 050010                      add ax, 0x1000
   931 00000543 8EC0                        mov es, ax
   932                                  
   933                                  no_wrap_in_memory:
   934 00000545 E2E7                        loop read_memory_loop
   935                                  
   936 00000547 6A23                        push word '#'
   937 00000549 E82D01                      call send_byte
   938 0000054C 52                          push dx
   939 0000054D E84601                      call send_hex
   940 00000550 5A                          pop dx
   941                                  
   942 00000551 E96CFE                      jmp terminate_packet_processing
   943                                  
   944                                  
   945                                  ; check this
   946                                  gdb_write_memory:
   947                                      ; extract length of address in packet
   948 00000554 B02C                        mov al, ','
   949 00000556 BF[750A]                    mov di, packet + 2
   950 00000559 B90A00                      mov cx, 10
   951                                  
   952 0000055C FC                          cld
   953 0000055D F2AE                        repne scasb
   954                                  
   955                                      ; length in bx
   956 0000055F 89FB                        mov bx, di
   957 00000561 81EB[760A]                  sub bx, packet + 3
   958                                  
   959                                      ; extract length of number of bytes to write
   960 00000565 B03A                        mov al, ':'
   961 00000567 B90A00                      mov cx, 10
   962                                  
   963 0000056A F2AE                        repne scasb
   964                                  
   965                                      ; length in cx and pointer to data in si
   966 0000056C 89FE                        mov si, di
   967 0000056E 81EF[770A]                  sub di, packet + 4
   968 00000572 29DF                        sub di, bx
   969 00000574 89F9                        mov cx, di
   970                                  
   971                                      ; extract and convert 32 bit address to segment:offset
   972 00000576 68[750A]                    push word packet + 2
   973 00000579 53                          push bx
   974 0000057A E8C101                      call extract_hex
   975 0000057D E81402                      call convert_physical_to_logical
   976 00000580 5F                          pop di
   977 00000581 07                          pop es
   978                                  
   979                                      ; extract number of bytes to write
   980 00000582 B8[760A]                    mov ax, packet + 3
   981 00000585 01D8                        add ax, bx
   982                                  
   983 00000587 50                          push ax
   984 00000588 51                          push cx
   985 00000589 E8B201                      call extract_hex
   986 0000058C 59                          pop cx
   987 0000058D 58                          pop ax
   988                                  
   989 0000058E 31C0                        xor ax, ax
   990 00000590 31D2                        xor dx, dx
   991 00000592 89F3                        mov bx, si
   992                                      ; mov es, [childseg]
   993                                  
   994                                  write_memory_loop:
   995 00000594 53                          push bx
   996 00000595 6A02                        push word 2
   997 00000597 E8A401                      call extract_hex
   998 0000059A 58                          pop ax
   999 0000059B 5E                          pop si
  1000                                  
  1001 0000059C AA                          stosb
  1002 0000059D 43                          inc bx
  1003                                  
  1004 0000059E E2F4                        loop write_memory_loop
  1005                                  
  1006 000005A0 E933FE                      jmp gdb_ok
  1007                                  
  1008                                  
  1009                                  ;-------------------------breakpoint setting functions-------------------------
  1010                                  
  1011                                  ; find the index of the opcode in the opcodes array
  1012                                  find_opcode:
  1013                                      ; Parameters:
  1014                                      ; [bp + 4] - address of breakpoint
  1015                                      ; Returns:
  1016                                      ; [bp + 4] - index in opcodes array
  1017                                  
  1018 000005A3 55                          push bp
  1019 000005A4 89E5                        mov bp, sp
  1020                                      
  1021 000005A6 50                          push ax
  1022 000005A7 51                          push cx
  1023 000005A8 57                          push di
  1024 000005A9 06                          push es
  1025                                  
  1026 000005AA 1E                          push ds
  1027 000005AB 07                          pop es
  1028                                  
  1029 000005AC 8B4604                      mov ax, [bp + 4]
  1030 000005AF 8B0E[7D0C]                  mov cx, [opcodearrsize]
  1031 000005B3 BF[7F0E]                    mov di, opcodespos
  1032                                  
  1033 000005B6 E305                        jcxz missing_opcode
  1034                                  
  1035 000005B8 FC                          cld
  1036 000005B9 F2AF                        repne scasw
  1037 000005BB 7407                        jz found_opcode_addr
  1038                                  
  1039                                  missing_opcode:
  1040 000005BD C74604FFFF                  mov word [bp + 4], 0xFFFF
  1041                                  
  1042 000005C2 EB09                        jmp done_find
  1043                                  
  1044                                  found_opcode_addr:
  1045 000005C4 81EF[810E]                  sub di, opcodespos + 2
  1046 000005C8 D1EF                        shr di, 1
  1047 000005CA 897E04                      mov [bp + 4], di
  1048                                  
  1049                                  done_find:
  1050 000005CD 07                          pop es
  1051 000005CE 5F                          pop di
  1052 000005CF 59                          pop cx
  1053 000005D0 58                          pop ax
  1054                                  
  1055 000005D1 5D                          pop bp
  1056 000005D2 C3                          ret
  1057                                  
  1058                                  
  1059                                  ; push an opcode for a breakpoint in the opcodes array
  1060                                  ; and replace the opcode at the breakpoint address with 0xCC
  1061                                  push_opcode:
  1062                                      ; Parameters:
  1063                                      ; [bp + 4] - address of breakpoint
  1064                                      ; Returns:
  1065                                      ; CF - set if error
  1066                                  
  1067 000005D3 55                          push bp
  1068 000005D4 89E5                        mov bp, sp
  1069                                  
  1070 000005D6 50                          push ax
  1071 000005D7 51                          push cx
  1072 000005D8 56                          push si
  1073 000005D9 57                          push di
  1074 000005DA 06                          push es
  1075                                  
  1076 000005DB 1E                          push ds
  1077 000005DC 07                          pop es
  1078                                  
  1079 000005DD 8B4604                      mov ax, [bp + 4]
  1080 000005E0 8B0E[7D0C]                  mov cx, [opcodearrsize]
  1081 000005E4 BF[7F0E]                    mov di, opcodespos
  1082                                  
  1083 000005E7 E30B                        jcxz skip_push_search
  1084                                  
  1085 000005E9 81F90001                    cmp cx, 256
  1086 000005ED 7327                        jae push_opcode_error
  1087                                  
  1088 000005EF FC                          cld
  1089 000005F0 F2AF                        repne scasw
  1090 000005F2 7422                        jz push_opcode_error
  1091                                  
  1092                                  skip_push_search:
  1093 000005F4 89C6                        mov si, ax
  1094 000005F6 8B3E[7D0C]                  mov di, [opcodearrsize]
  1095 000005FA 8E06[550A]                  mov es, [childseg]
  1096                                  
  1097                                      ; opcode replaced for breakpoint in child process
  1098 000005FE 268A04                      mov al, [es:si]
  1099 00000601 26C604CC                    mov byte [es:si], 0CCh
  1100                                      ; opcode stored in array for reference
  1101 00000605 8885[7F0C]                  mov [opcodes + di], al
  1102 00000609 D1E7                        shl di, 1
  1103 0000060B 89B5[7F0E]                  mov [opcodespos + di], si
  1104 0000060F FF06[7D0C]                  inc word [opcodearrsize]
  1105                                  
  1106 00000613 F8                          clc
  1107 00000614 EB01                        jmp done_push
  1108                                  
  1109                                  push_opcode_error:
  1110 00000616 F9                          stc
  1111                                  
  1112                                  done_push:
  1113 00000617 07                          pop es
  1114 00000618 5F                          pop di
  1115 00000619 5E                          pop si
  1116 0000061A 59                          pop cx
  1117 0000061B 58                          pop ax
  1118                                  
  1119 0000061C 5D                          pop bp
  1120 0000061D C20200                      ret 2
  1121                                  
  1122                                  
  1123                                  ; remove an opcode from the opcodes array
  1124                                  ; and restore the original opcode at the breakpoint address
  1125                                  remove_opcode:
  1126                                      ; [bp + 4] - address of breakpoint
  1127 00000620 55                          push bp
  1128 00000621 89E5                        mov bp, sp
  1129                                  
  1130 00000623 50                          push ax
  1131 00000624 51                          push cx
  1132 00000625 56                          push si
  1133 00000626 57                          push di
  1134 00000627 06                          push es
  1135                                  
  1136 00000628 1E                          push ds
  1137 00000629 07                          pop es
  1138                                  
  1139 0000062A FF7604                      push word [bp + 4]
  1140 0000062D E873FF                      call find_opcode
  1141 00000630 59                          pop cx
  1142                                  
  1143 00000631 83F9FF                      cmp cx, 0xFFFF
  1144 00000634 7439                        je remove_opcode_error
  1145                                  
  1146 00000636 89CE                        mov si, cx
  1147 00000638 81C6[7F0C]                  add si, opcodes
  1148 0000063C 8E06[550A]                  mov es, [childseg]
  1149                                  
  1150                                      ; push di
  1151 00000640 8B7E04                      mov di, [bp + 4]
  1152 00000643 FC                          cld
  1153                                  
  1154                                      ; opcode replaced for original
  1155 00000644 AC                          lodsb
  1156 00000645 AA                          stosb
  1157                                  
  1158                                      ; remove opcode and shift the array
  1159 00000646 1E                          push ds
  1160 00000647 07                          pop es
  1161                                  
  1162                                      ; setup di index for shifting addresses
  1163 00000648 89CF                        mov di, cx
  1164 0000064A D1E7                        shl di, 1
  1165 0000064C 81C7[7F0E]                  add di, opcodespos
  1166 00000650 57                          push di
  1167                                  
  1168                                      ; shift the opcodes array
  1169 00000651 A1[7D0C]                    mov ax, [opcodearrsize]
  1170 00000654 29C8                        sub ax, cx
  1171 00000656 48                          dec ax
  1172 00000657 89C1                        mov cx, ax
  1173 00000659 51                          push cx
  1174                                  
  1175 0000065A 89F7                        mov di, si
  1176 0000065C 4F                          dec di
  1177 0000065D F3A4                        rep movsb
  1178                                  
  1179                                      ; shift the address array
  1180 0000065F 59                          pop cx
  1181 00000660 5F                          pop di
  1182                                  
  1183 00000661 89FE                        mov si, di
  1184 00000663 83C602                      add si, 2
  1185 00000666 F3A5                        rep movsw
  1186                                  
  1187 00000668 FF0E[7D0C]                  dec word [opcodearrsize]
  1188 0000066C F8                          clc
  1189 0000066D EB01                        jmp done_remove
  1190                                  
  1191                                  remove_opcode_error:
  1192 0000066F F9                          stc
  1193                                  
  1194                                  done_remove:
  1195 00000670 07                          pop es
  1196 00000671 5F                          pop di
  1197 00000672 5E                          pop si
  1198 00000673 59                          pop cx
  1199 00000674 58                          pop ax
  1200                                  
  1201 00000675 5D                          pop bp
  1202 00000676 C20200                      ret 2
  1203                                  
  1204                                  
  1205                                  ;-------------------------COM port functions-------------------------
  1206                                  
  1207                                  ; send a byte through COM port
  1208                                  send_byte:
  1209                                      ; Parameters:
  1210                                      ; [bp + 4] - byte to send
  1211                                  
  1212 00000679 55                          push bp
  1213 0000067A 89E5                        mov bp, sp
  1214 0000067C 50                          push ax
  1215 0000067D 52                          push dx
  1216                                  
  1217                                  testline:
  1218 0000067E B403                        mov ah, 3
  1219 00000680 31D2                        xor dx, dx
  1220 00000682 CD14                        int 0x14
  1221                                  
  1222 00000684 80E420                      and ah, 32
  1223 00000687 74F5                        jz testline
  1224                                  
  1225 00000689 8A4604                      mov al, [bp + 4]
  1226 0000068C BAF803                      mov dx, 0x3F8
  1227 0000068F EE                          out dx, al
  1228                                  
  1229 00000690 5A                          pop dx
  1230 00000691 58                          pop ax
  1231 00000692 5D                          pop bp
  1232 00000693 C20200                      ret 2
  1233                                  
  1234                                  
  1235                                  ; send a hex word through COM port
  1236                                  send_hex:
  1237                                      ; Parameters:
  1238                                      ; [bp + 4] - value to send
  1239                                      ; Returns:
  1240                                      ; [bp + 4] - checksum value
  1241                                  
  1242 00000696 55                          push bp
  1243 00000697 89E5                        mov bp, sp
  1244 00000699 50                          push ax
  1245 0000069A 52                          push dx
  1246                                  
  1247 0000069B 31C0                        xor ax, ax
  1248 0000069D 31D2                        xor dx, dx
  1249                                  
  1250 0000069F B0F0                        mov al, 0xF0
  1251 000006A1 224604                      and al, [bp + 4]
  1252 000006A4 C0E804                      shr al, 4
  1253                                  
  1254 000006A7 50                          push ax
  1255 000006A8 E8D600                      call convert_to_ascii
  1256 000006AB 58                          pop ax
  1257 000006AC 00C2                        add dl, al
  1258 000006AE 50                          push ax
  1259 000006AF E8C7FF                      call send_byte
  1260                                  
  1261 000006B2 B80F00                      mov ax, 0xF
  1262 000006B5 224604                      and al, [bp + 4]
  1263 000006B8 50                          push ax
  1264 000006B9 E8C500                      call convert_to_ascii
  1265 000006BC 58                          pop ax
  1266 000006BD 00C2                        add dl, al
  1267 000006BF 50                          push ax
  1268 000006C0 E8B6FF                      call send_byte
  1269                                  
  1270 000006C3 885604                      mov [bp + 4], dl
  1271                                  
  1272 000006C6 5A                          pop dx
  1273 000006C7 58                          pop ax
  1274 000006C8 5D                          pop bp
  1275 000006C9 C3                          ret
  1276                                  
  1277                                  
  1278                                  ; send a reply packet through COM port
  1279                                  send_reply:
  1280                                      ; Parameters:
  1281                                      ; [bp + 4] - address of reply packet
  1282                                  
  1283 000006CA 55                          push bp
  1284 000006CB 89E5                        mov bp, sp
  1285 000006CD 50                          push ax
  1286 000006CE 56                          push si
  1287                                      
  1288 000006CF 31C0                        xor ax, ax
  1289 000006D1 8B7604                      mov si, [bp + 4]
  1290                                  
  1291                                  replyloop:
  1292 000006D4 8A04                        mov al, [si]
  1293 000006D6 50                          push ax
  1294 000006D7 E89FFF                      call send_byte
  1295                                  
  1296 000006DA 46                          inc si
  1297 000006DB 803C00                      cmp byte [si], 0
  1298 000006DE 75F4                        jnz replyloop
  1299                                  
  1300 000006E0 5E                          pop si
  1301 000006E1 58                          pop ax
  1302 000006E2 5D                          pop bp
  1303 000006E3 C20200                      ret 2
  1304                                  
  1305                                  
  1306                                  ;-------------------------miscellaneous functions-------------------------
  1307                                  
  1308                                  ; transfer to parent process stack
  1309                                  push_parent_stack:
  1310 000006E6 2E8C16[7F12]                mov [cs:tempregs], ss
  1311 000006EB 2E8926[8112]                mov [cs:tempregs + 2], sp
  1312 000006F0 2E892E[8312]                mov [cs:tempregs + 4], bp
  1313 000006F5 2EA3[8512]                  mov [cs:tempregs + 6], ax
  1314 000006F9 2E891E[8712]                mov [cs:tempregs + 8], bx
  1315                                  
  1316 000006FE 5B                          pop bx
  1317                                  
  1318 000006FF 89E5                        mov bp, sp
  1319 00000701 2E8B26[8916]                mov sp, [cs:parentstack + 1024]
  1320 00000706 8CC8                        mov ax, cs
  1321 00000708 8ED0                        mov ss, ax
  1322                                  
  1323 0000070A FF7604                      push word [bp + 4]
  1324 0000070D FF7602                      push word [bp + 2]
  1325 00000710 FF7600                      push word [bp + 0]
  1326                                  
  1327 00000713 FFE3                        jmp bx
  1328                                  
  1329                                  
  1330                                  pop_parent_stack:
  1331 00000715 5B                          pop bx
  1332                                  
  1333 00000716 89E5                        mov bp, sp
  1334 00000718 2E8B26[8112]                mov sp, [cs:tempregs + 2]
  1335 0000071D 2E8E16[7F12]                mov ss, [cs:tempregs]
  1336                                  
  1337 00000722 83EC06                      sub sp, 6
  1338 00000725 FF7604                      push word [bp + 4]
  1339 00000728 FF7602                      push word [bp + 2]
  1340 0000072B FF7600                      push word [bp + 0]
  1341 0000072E 53                          push bx
  1342                                  
  1343 0000072F 2E8B2E[8312]                mov bp, [cs:tempregs + 4]
  1344 00000734 2EA1[8512]                  mov ax, [cs:tempregs + 6]
  1345 00000738 2E8B1E[8712]                mov bx, [cs:tempregs + 8]
  1346                                  
  1347 0000073D C3                          ret
  1348                                  
  1349                                  
  1350                                  ; extracts hex value for equivalent ASCII string
  1351                                  ; e.g. "1234" -> 0x1234
  1352                                  extract_hex:
  1353                                      ; Parameters:
  1354                                      ; [bp + 6] - address of value to extract
  1355                                      ; [bp + 4] - length (max 8 for 32 bit address)
  1356                                  
  1357                                      ; Returns:
  1358                                      ; [bp + 6] - higher word of 32 bit value
  1359                                      ; [bp + 4] - lower word of 32 bit value
  1360                                  
  1361 0000073E 55                          push bp
  1362 0000073F 89E5                        mov bp, sp
  1363                                  
  1364 00000741 50                          push ax
  1365 00000742 51                          push cx
  1366 00000743 56                          push si
  1367                                  
  1368 00000744 8B4E04                      mov cx, [bp + 4]
  1369 00000747 8B7606                      mov si, [bp + 6]
  1370                                  
  1371 0000074A C746060000                  mov word [bp + 6], 0
  1372 0000074F C746040000                  mov word [bp + 4], 0
  1373                                  
  1374                                  extract_next_hex:
  1375 00000754 8A04                        mov al, [si]
  1376 00000756 2C30                        sub al, 0x30
  1377                                  
  1378 00000758 3C0A                        cmp al, 10
  1379 0000075A 7202                        jb skip_extract_char
  1380                                  
  1381 0000075C 2C27                        sub al, 0x27
  1382                                  
  1383                                  skip_extract_char:
  1384                                      ; shift the 32 bit value left by 4 bits
  1385 0000075E C1660604                    shl word [bp + 6], 4        ; higher nibble is empty
  1386 00000762 C1460404                    rol word [bp + 4], 4        ; higher nibble that is to be shifted to bp+6 is now in lower nibble
  1387                                  
  1388 00000766 B40F                        mov ah, 0xF                 ; prepare mask
  1389 00000768 226604                      and ah, [bp + 4]            ; extract the higher nibble
  1390 0000076B 836606F0                    and word [bp + 6], 0xFFF0   ; reset lower nibble of higher word
  1391 0000076F 086606                      or [bp + 6], ah             ; pasted higher nibble to the higher word
  1392                                  
  1393 00000772 836604F0                    and word [bp + 4], 0xFFF0   ; reset lower nibble of higher word
  1394 00000776 084604                      or [bp + 4], al             ; pasted extracted lower nibble to the lower word
  1395                                  
  1396 00000779 46                          inc si
  1397 0000077A E2D8                        loop extract_next_hex
  1398                                  
  1399 0000077C 5E                          pop si
  1400 0000077D 59                          pop cx
  1401 0000077E 58                          pop ax
  1402                                  
  1403 0000077F 5D                          pop bp
  1404 00000780 C3                          ret
  1405                                  
  1406                                  
  1407                                  ; converts a byte value to its ASCII representation
  1408                                  convert_to_ascii:
  1409                                      ; Parameters:
  1410                                      ; [bp + 4] - byte value to convert to ASCII
  1411                                  
  1412                                      ; Returns:
  1413                                      ; [bp + 4] - ASCII representation of the byte value
  1414                                  
  1415 00000781 55                          push bp
  1416 00000782 89E5                        mov bp, sp
  1417                                      
  1418 00000784 807E040A                    cmp byte [bp + 4], 10
  1419 00000788 7C04                        jl hex_digit
  1420                                  
  1421 0000078A 80460427                    add byte [bp + 4], 0x27
  1422                                  
  1423                                  hex_digit:
  1424 0000078E 80460430                    add byte [bp + 4], 0x30
  1425                                  
  1426 00000792 5D                          pop bp
  1427 00000793 C3                          ret
  1428                                  
  1429                                  
  1430                                  ; converts a 32 bit physical address to a logical address in segment:offset format
  1431                                  convert_physical_to_logical:
  1432                                      ; Parameters:
  1433                                      ; [bp + 6] - higher word of 32 bit physical address
  1434                                      ; [bp + 4] - lower word of 32 bit physical address
  1435                                  
  1436                                      ; Returns:
  1437                                      ; [bp + 6] - segment of logical address
  1438                                      ; [bp + 4] - offset of logical address
  1439                                  
  1440 00000794 55                          push bp
  1441 00000795 89E5                        mov bp, sp
  1442                                  
  1443 00000797 50                          push ax
  1444 00000798 51                          push cx
  1445 00000799 52                          push dx
  1446                                  
  1447 0000079A 8B4604                      mov ax, [bp + 4]
  1448 0000079D 8B5606                      mov dx, [bp + 6]
  1449 000007A0 B90400                      mov cx, 4
  1450                                  
  1451                                      ; mask to 20 bits
  1452 000007A3 83E20F                      and dx, 0x000F
  1453                                  
  1454                                  segment_shift_loop:
  1455 000007A6 D1EA                        shr dx, 1
  1456 000007A8 D1D8                        rcr ax, 1
  1457 000007AA E2FA                        loop segment_shift_loop
  1458                                  
  1459 000007AC 894606                      mov [bp + 6], ax ; segment
  1460 000007AF 8366040F                    and word [bp + 4], 0x000F ; keep only lower 4 bits of offset
  1461                                  
  1462 000007B3 5A                          pop dx
  1463 000007B4 59                          pop cx
  1464 000007B5 58                          pop ax
  1465                                  
  1466 000007B6 5D                          pop bp
  1467 000007B7 C3                          ret
  1468                                  
  1469                                  
  1470                                  ; checks if the current packet matches the given packet
  1471                                  ; doesn't handle substrings
  1472                                  check_packet:
  1473                                      ; Parameters:
  1474                                      ; [bp + 4] - packet to check against
  1475                                  
  1476                                      ; Returns:
  1477                                      ; ZF - set if packet is valid
  1478                                  
  1479 000007B8 55                          push bp
  1480 000007B9 89E5                        mov bp, sp
  1481                                  
  1482 000007BB 50                          push ax
  1483 000007BC 51                          push cx
  1484 000007BD 56                          push si
  1485 000007BE 57                          push di
  1486 000007BF 06                          push es
  1487                                  
  1488 000007C0 1E                          push ds
  1489 000007C1 07                          pop es
  1490                                  
  1491 000007C2 B000                        mov al, 0
  1492 000007C4 B90002                      mov cx, ARRAY_SIZE
  1493 000007C7 8B7E04                      mov di, [bp + 4]
  1494                                  
  1495 000007CA FC                          cld
  1496 000007CB F2AE                        repne scasb
  1497                                  
  1498 000007CD B80002                      mov ax, ARRAY_SIZE
  1499 000007D0 29C8                        sub ax, cx
  1500 000007D2 48                          dec ax
  1501 000007D3 89C1                        mov cx, ax
  1502                                  
  1503 000007D5 8B7E04                      mov di, [bp + 4]
  1504 000007D8 BE[740A]                    mov si, packet + 1
  1505                                  
  1506 000007DB F3A6                        repe cmpsb
  1507                                  
  1508 000007DD 07                          pop es
  1509 000007DE 5F                          pop di
  1510 000007DF 5E                          pop si
  1511 000007E0 59                          pop cx
  1512 000007E1 58                          pop ax
  1513                                  
  1514 000007E2 5D                          pop bp
  1515 000007E3 C20200                      ret 2
  1516                                  
  1517                                  
  1518 000007E6 55                      printstr: push bp
  1519 000007E7 89E5                        mov bp, sp
  1520 000007E9 06                          push es
  1521 000007EA 50                          push ax
  1522 000007EB 53                          push bx
  1523 000007EC 51                          push cx
  1524 000007ED 52                          push dx
  1525 000007EE 56                          push si
  1526 000007EF 57                          push di
  1527 000007F0 B800B8                      mov ax, 0xb800
  1528 000007F3 8EC0                        mov es, ax ; point es to video base
  1529 000007F5 BF5000                      mov di, 80 ; load di with columns per row
  1530 000007F8 8B460A                      mov ax, [bp+10] ; load ax with row number
  1531 000007FB F7E7                        mul di ; multiply with columns per row
  1532 000007FD 89C7                        mov di, ax ; save result in di
  1533 000007FF 037E08                      add di, [bp+8] ; add column number
  1534 00000802 D1E7                        shl di, 1 ; turn into byte count
  1535 00000804 8B7606                      mov si, [bp+6] ; string to be printed
  1536 00000807 8B4E04                      mov cx, [bp+4] ; length of string
  1537 0000080A B407                        mov ah, 0x07 ; normal attribute is fixed
  1538 0000080C 8A04                    nextchar: mov al, [si] ; load next char of string
  1539 0000080E 268905                      mov [es:di], ax ; show next char on screen
  1540 00000811 83C702                      add di, 2 ; move to next screen location
  1541 00000814 83C601                      add si, 1 ; move to next char
  1542 00000817 E2F3                        loop nextchar ; repeat the operation cx times
  1543 00000819 5F                          pop di
  1544 0000081A 5E                          pop si
  1545 0000081B 5A                          pop dx
  1546 0000081C 59                          pop cx
  1547 0000081D 5B                          pop bx
  1548 0000081E 58                          pop ax
  1549 0000081F 07                          pop es
  1550 00000820 5D                          pop bp
  1551 00000821 C20800                      ret 8
  1552                                  
  1553                                  
  1554 00000824 55                      printnum: push bp
  1555 00000825 89E5                        mov bp, sp
  1556 00000827 06                          push es
  1557 00000828 50                          push ax
  1558 00000829 53                          push bx
  1559 0000082A 51                          push cx
  1560 0000082B 52                          push dx
  1561 0000082C 57                          push di
  1562 0000082D BF5000                      mov di, 80 ; load di with columns per row
  1563 00000830 8B4608                      mov ax, [bp+8] ; load ax with row number
  1564 00000833 F7E7                        mul di ; multiply with columns per row
  1565 00000835 89C7                        mov di, ax ; save result in di
  1566 00000837 037E06                      add di, [bp+6] ; add column number
  1567 0000083A D1E7                        shl di, 1 ; turn into byte count
  1568 0000083C 83C708                      add di, 8 ; to end of number location
  1569 0000083F B800B8                      mov ax, 0xb800
  1570 00000842 8EC0                        mov es, ax ; point es to video base
  1571 00000844 8B4604                      mov ax, [bp+4] ; load number in ax
  1572 00000847 BB1000                      mov bx, 16 ; use base 16 for division
  1573 0000084A B90400                      mov cx, 4 ; initialize count of digits
  1574 0000084D BA0000                  nextdigit: mov dx, 0 ; zero upper half of dividend
  1575 00000850 F7F3                        div bx ; divide by 10
  1576 00000852 80C230                      add dl, 0x30 ; convert digit into ascii value
  1577 00000855 80FA39                      cmp dl, 0x39 ; is the digit an alphabet
  1578 00000858 7603                        jbe skipalpha ; no, skip addition
  1579 0000085A 80C207                      add dl, 7 ; yes, make in alphabet code
  1580 0000085D B607                    skipalpha: mov dh, 0x07 ; attach normal attribute
  1581 0000085F 268915                      mov [es:di], dx ; print char on screen
  1582 00000862 83EF02                      sub di, 2 ; to previous screen location
  1583 00000865 E2E6                        loop nextdigit ; if no divide it again
  1584 00000867 5F                          pop di
  1585 00000868 5A                          pop dx
  1586 00000869 59                          pop cx
  1587 0000086A 5B                          pop bx
  1588 0000086B 58                          pop ax
  1589 0000086C 07                          pop es
  1590 0000086D 5D                          pop bp
  1591 0000086E C20600                      ret 6
  1592                                  
  1593                                  
  1594                                  ;--------------------------data segment-------------------------
  1595                                  
  1596                                  ;-----Error handling strings-----
  1597 00000871 4E6F2046696C652050-     no_filepath_msg:    db 'No File Path was Provided$'
  1597 0000087A 617468207761732050-
  1597 00000883 726F766964656424   
  1598 0000088B 46696C6520636F756C-     file_not_found_msg: db 'File could not be Found$'
  1598 00000894 64206E6F7420626520-
  1598 0000089D 466F756E6424       
  1599 000008A3 4E6F204D656D6F7279-     no_mem_aval_msg:    db 'No Memory is Available for Program$'
  1599 000008AC 20697320417661696C-
  1599 000008B5 61626C6520666F7220-
  1599 000008BE 50726F6772616D24   
  1600 000008C6 46696C6520636F756C-     file_not_read_msg:  db 'File could not be Read$'
  1600 000008CF 64206E6F7420626520-
  1600 000008D8 5265616424         
  1601                                  
  1602                                  ;-----GDB protocol packets-----
  1603 000008DD 71537570706F727465-     supportPack:    db 'qSupported', 0
  1603 000008E6 6400               
  1604 000008E8 76436F6E743F00          contPack:       db 'vCont?', 0
  1605 000008EF 764D7573745265706C-     mustreplyPack:  db 'vMustReplyEmpty', 0
  1605 000008F8 79456D70747900     
  1606 000008FF 48673000                multiPack:      db 'Hg0', 0
  1607 00000903 716654687265616449-     threadPack:     db 'qfThreadInfo', 0
  1607 0000090C 6E666F00           
  1608 00000910 717354687265616449-     endthreadPack:  db 'qsThreadInfo', 0
  1608 00000919 6E666F00           
  1609 0000091D 714174746163686564-     attachedPack:   db 'qAttached', 0
  1609 00000926 00                 
  1610 00000927 48632D3100              currthreadPack: db 'Hc-1', 0
  1611 0000092C 714300                  querycurrPack:  db 'qC', 0
  1612                                  
  1613                                  ;------GDB protocol replies-----
  1614 0000092F 245061636B65745369-     supportreply:   db '$PacketSize=512;swbreak+;kill+;vContSupported-#67', 0
  1614 00000938 7A653D3531323B7377-
  1614 00000941 627265616B2B3B6B69-
  1614 0000094A 6C6C2B3B76436F6E74-
  1614 00000953 537570706F72746564-
  1614 0000095C 2D23363700         
  1615 00000961 2423303000              nothing:        db '$#00', 0
  1616 00000966 244F4B23396100          okreply:        db '$OK#9a', 0
  1617 0000096D 2445303123787800        errorreply:     db '$E01#xx', 0
  1618 00000975 2453303523623800        stopreply:      db '$S05#b8', 0
  1619 0000097D 246D3123396500          singletreply:   db '$m1#9e', 0
  1620 00000984 246C23366300            endlistreply:   db '$l#6c', 0
  1621 0000098A 243023333000            childkillreply: db '$0#30', 0
  1622 00000990 2451433123633500        currthreply:    db '$QC1#c5', 0
  1623 00000998 2457303023353700        exitreply:      db '$W00#57', 0
  1624                                  
  1625                                  ;-----GDB general packets-----
  1626 000009A0 713F6B736370675A7A-     availpacks:     db 'q', '?', 'k', 's', 'c', 'p', 'g', 'Z', 'z', 'm', 'X'
  1626 000009A9 6D58               
  1627 000009AB [CE03][FE03][0604]-     addresspacks:   dw gdb_unknown, gdb_why, gdb_kill, gdb_debugger, gdb_debugger, gdb_extract_register, gdb_send_registers, gdb_set_breakpoint, gdb_remove_breakpoint, gdb_read_memory, gdb_write_memory
  1627 000009B1 [1004][1004][1C04]-
  1627 000009B7 [5204][7D04][B504]-
  1627 000009BD [ED04][5405]       
  1628 000009C1 0B00                    packslength:    dw ($ - addresspacks) / 2
  1629                                  
  1630                                  ;-----debugger variables-----
  1631 000009C3 0000                    orig_sp:        dw 0
  1632 000009C5 00000000                oldtrapisr:     dd 0
  1633 000009C9 00000000                oldbrkisr:      dd 0
  1634 000009CD 00000000                oldcomisr:      dd 0
  1635 000009D1 00000000                oldretisr:      dd 0
  1636 000009D5 00<rep 80h>             filepath:       times 128 db 0
  1637                                  
  1638                                  ;-----debugger data-----
  1639 00000A55 0000                    childseg:       dw 0
  1640 00000A57 0000<rep Eh>            regs:           times 14 dw 0
  1641 00000A73 00<rep 200h>            packet:         times ARRAY_SIZE db 0
  1642 00000C73 [730A]                  packettail:     dw packet
  1643 00000C75 00                      inprocessing:   db 0
  1644 00000C76 00                      chksum:         db 0
  1645 00000C77 00                      startprogram:   db 0
  1646 00000C78 00                      forcepause:     db 0
  1647                                  
  1648                                  ;-----breakpoint variables-----
  1649 00000C79 CC                      intopcode:      db 0xCC
  1650 00000C7A 00                      reinstallbrk:   db 0
  1651 00000C7B 0000                    tempbrkaddr:    dw 0
  1652 00000C7D 0000                    opcodearrsize:  dw 0
  1653 00000C7F 00<rep 200h>            opcodes:        times ARRAY_SIZE db 0
  1654 00000E7F 0000<rep 200h>          opcodespos:     times ARRAY_SIZE dw 0
  1655                                  
  1656                                  ;-----temp stack-----
  1657 0000127F 000000000000000000-     tempregs:       dw 0, 0, 0, 0, 0       ; SS, SP, BP, AX, BX
  1657 00001288 00                 
  1658 00001289 0000<rep 200h>          parentstack:    times ARRAY_SIZE dw 0
